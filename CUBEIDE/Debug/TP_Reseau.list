
TP_Reseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08006d24  08006d24  00016d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e4  080070e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070ec  080070ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080070f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000070  08007164  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08007164  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014233  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002789  00000000  00000000  000342d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00036a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00037c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ed5  00000000  00000000  00038d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015813  00000000  00000000  0005cc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d76f4  00000000  00000000  00072418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149b0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005574  00000000  00000000  00149b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d0c 	.word	0x08006d0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006d0c 	.word	0x08006d0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <BMP280_Read_Reg>:
	} else {
		return 1;
	}
}

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 80005c4:	23ee      	movs	r3, #238	; 0xee
 80005c6:	b299      	uxth	r1, r3
 80005c8:	1dfa      	adds	r2, r7, #7
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2301      	movs	r3, #1
 80005d2:	4814      	ldr	r0, [pc, #80]	; (8000624 <BMP280_Read_Reg+0x70>)
 80005d4:	f002 f92e 	bl	8002834 <HAL_I2C_Master_Transmit>
 80005d8:	4603      	mov	r3, r0
 80005da:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 80005e2:	4811      	ldr	r0, [pc, #68]	; (8000628 <BMP280_Read_Reg+0x74>)
 80005e4:	f005 fc54 	bl	8005e90 <puts>
	}

	buf = (uint8_t*) malloc(length);
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 fad2 	bl	8005b94 <malloc>
 80005f0:	4603      	mov	r3, r0
 80005f2:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 80005f4:	23ee      	movs	r3, #238	; 0xee
 80005f6:	b299      	uxth	r1, r3
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	4807      	ldr	r0, [pc, #28]	; (8000624 <BMP280_Read_Reg+0x70>)
 8000606:	f002 fa13 	bl	8002a30 <HAL_I2C_Master_Receive>
 800060a:	4603      	mov	r3, r0
 800060c:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d002      	beq.n	800061a <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <BMP280_Read_Reg+0x78>)
 8000616:	f005 fc3b 	bl	8005e90 <puts>
	}

	return buf;
 800061a:	68bb      	ldr	r3, [r7, #8]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000b4 	.word	0x200000b4
 8000628:	08006db4 	.word	0x08006db4
 800062c:	08006dd0 	.word	0x08006dd0

08000630 <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8000636:	23fa      	movs	r3, #250	; 0xfa
 8000638:	2203      	movs	r2, #3
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ffb9 	bl	80005b4 <BMP280_Read_Reg>
 8000642:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	031a      	lsls	r2, r3, #12
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3301      	adds	r3, #1
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	3202      	adds	r2, #2
 8000658:	7812      	ldrb	r2, [r2, #0]
 800065a:	0912      	lsrs	r2, r2, #4
 800065c:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800065e:	4313      	orrs	r3, r2
 8000660:	603b      	str	r3, [r7, #0]

	free(buf);
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f005 fa9e 	bl	8005ba4 <free>

	printf("Temperature: ");
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <BMP280_get_temperature+0x58>)
 800066a:	f005 fb8b 	bl	8005d84 <iprintf>
	printf("0X%05lX", adc_T);
 800066e:	6839      	ldr	r1, [r7, #0]
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <BMP280_get_temperature+0x5c>)
 8000672:	f005 fb87 	bl	8005d84 <iprintf>
	printf("\r\n");
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <BMP280_get_temperature+0x60>)
 8000678:	f005 fc0a 	bl	8005e90 <puts>

	return adc_T;
 800067c:	683b      	ldr	r3, [r7, #0]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	08006dec 	.word	0x08006dec
 800068c:	08006dfc 	.word	0x08006dfc
 8000690:	08006e04 	.word	0x08006e04

08000694 <BMP280_get_pressure>:

int BMP280_get_pressure() {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 800069a:	23f7      	movs	r3, #247	; 0xf7
 800069c:	2203      	movs	r2, #3
 800069e:	4611      	mov	r1, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff87 	bl	80005b4 <BMP280_Read_Reg>
 80006a6:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	031a      	lsls	r2, r3, #12
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3301      	adds	r3, #1
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	3202      	adds	r2, #2
 80006bc:	7812      	ldrb	r2, [r2, #0]
 80006be:	0912      	lsrs	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80006c2:	4313      	orrs	r3, r2
 80006c4:	603b      	str	r3, [r7, #0]

	free(buf);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f005 fa6c 	bl	8005ba4 <free>

	printf("Pressure:    0x");
 80006cc:	4807      	ldr	r0, [pc, #28]	; (80006ec <BMP280_get_pressure+0x58>)
 80006ce:	f005 fb59 	bl	8005d84 <iprintf>
	printf("%05lX", adc_P);
 80006d2:	6839      	ldr	r1, [r7, #0]
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <BMP280_get_pressure+0x5c>)
 80006d6:	f005 fb55 	bl	8005d84 <iprintf>
	printf("\r\n");
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <BMP280_get_pressure+0x60>)
 80006dc:	f005 fbd8 	bl	8005e90 <puts>

	return adc_P;
 80006e0:	683b      	ldr	r3, [r7, #0]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	08006e08 	.word	0x08006e08
 80006f0:	08006e18 	.word	0x08006e18
 80006f4:	08006e04 	.word	0x08006e04

080006f8 <command>:
uint16_t newPos=0;

int isOk = 0;

void command(char bufferTransfert[RxBuf_SIZE], uint8_t Size)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
	//HAL_UART_Transmit(&huart2, RX_Pi_buffer, Size, 0xFFFF);
	if (strncmp(bufferTransfert,"GET_T",strlen("GET_T"))==0)
 8000704:	2205      	movs	r2, #5
 8000706:	4953      	ldr	r1, [pc, #332]	; (8000854 <command+0x15c>)
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f005 fbd9 	bl	8005ec0 <strncmp>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d11d      	bne.n	8000750 <command+0x58>
	{
		TemperatureV=BMP280_get_temperature();
 8000714:	f7ff ff8c 	bl	8000630 <BMP280_get_temperature>
 8000718:	4603      	mov	r3, r0
 800071a:	4a4f      	ldr	r2, [pc, #316]	; (8000858 <command+0x160>)
 800071c:	6013      	str	r3, [r2, #0]
			printf("T=+%d.%d_C\r\n",(int)(TemperatureV/100),TemperatureV%100);
 800071e:	4b4e      	ldr	r3, [pc, #312]	; (8000858 <command+0x160>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a4e      	ldr	r2, [pc, #312]	; (800085c <command+0x164>)
 8000724:	fb82 1203 	smull	r1, r2, r2, r3
 8000728:	1152      	asrs	r2, r2, #5
 800072a:	17db      	asrs	r3, r3, #31
 800072c:	1ad0      	subs	r0, r2, r3
 800072e:	4b4a      	ldr	r3, [pc, #296]	; (8000858 <command+0x160>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a4a      	ldr	r2, [pc, #296]	; (800085c <command+0x164>)
 8000734:	fb82 1203 	smull	r1, r2, r2, r3
 8000738:	1151      	asrs	r1, r2, #5
 800073a:	17da      	asrs	r2, r3, #31
 800073c:	1a8a      	subs	r2, r1, r2
 800073e:	2164      	movs	r1, #100	; 0x64
 8000740:	fb01 f202 	mul.w	r2, r1, r2
 8000744:	1a9a      	subs	r2, r3, r2
 8000746:	4601      	mov	r1, r0
 8000748:	4845      	ldr	r0, [pc, #276]	; (8000860 <command+0x168>)
 800074a:	f005 fb1b 	bl	8005d84 <iprintf>
 800074e:	e077      	b.n	8000840 <command+0x148>


	}
	else if (strncmp(bufferTransfert,"GET_P",strlen("GET_P"))==0)
 8000750:	2205      	movs	r2, #5
 8000752:	4944      	ldr	r1, [pc, #272]	; (8000864 <command+0x16c>)
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f005 fbb3 	bl	8005ec0 <strncmp>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10c      	bne.n	800077a <command+0x82>
	{
		PressureV=BMP280_get_pressure();
 8000760:	f7ff ff98 	bl	8000694 <BMP280_get_pressure>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b3f      	ldr	r3, [pc, #252]	; (8000868 <command+0x170>)
 800076a:	601a      	str	r2, [r3, #0]
		printf("P=%dPa\r\n",PressureV);
 800076c:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <command+0x170>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	483e      	ldr	r0, [pc, #248]	; (800086c <command+0x174>)
 8000774:	f005 fb06 	bl	8005d84 <iprintf>
 8000778:	e062      	b.n	8000840 <command+0x148>
	}
	else if (strncmp(bufferTransfert,"SET_K",strlen("SET_K"))==0)
 800077a:	2205      	movs	r2, #5
 800077c:	493c      	ldr	r1, [pc, #240]	; (8000870 <command+0x178>)
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f005 fb9e 	bl	8005ec0 <strncmp>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d114      	bne.n	80007b4 <command+0xbc>
	{
		//printf("SET_K Received\r\n");
		if (strncmp(bufferTransfert+strlen("SET_K"),"=",strlen("="))==0)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3305      	adds	r3, #5
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	4b38      	ldr	r3, [pc, #224]	; (8000874 <command+0x17c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d108      	bne.n	80007ac <command+0xb4>
			/*
			 * permet de transformer une chaîne de caractères,
			 * représentant une valeur entière, en une valeur numérique de type int.
			 * Le terme d'atoi est un acronyme signifiant : ASCII to integer.
			 */
			K=atoi(bufferTransfert+strlen("SET_K")+strlen("=")); //
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3306      	adds	r3, #6
 800079e:	4618      	mov	r0, r3
 80007a0:	f005 f9ca 	bl	8005b38 <atoi>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a34      	ldr	r2, [pc, #208]	; (8000878 <command+0x180>)
 80007a8:	6013      	str	r3, [r2, #0]
 80007aa:	e049      	b.n	8000840 <command+0x148>
		}
		else
			{
				printf("Command not found\r\n"
 80007ac:	4833      	ldr	r0, [pc, #204]	; (800087c <command+0x184>)
 80007ae:	f005 fb6f 	bl	8005e90 <puts>
 80007b2:	e045      	b.n	8000840 <command+0x148>
						"Please try this syntax\r\n"
						"SET_K=xxxx: to set the K coefficient on xxxx value (in 1/100e)\r\n");
			}
	}
	else if (strncmp(bufferTransfert,"GET_K",strlen("GET_K"))==0)
 80007b4:	2205      	movs	r2, #5
 80007b6:	4932      	ldr	r1, [pc, #200]	; (8000880 <command+0x188>)
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f005 fb81 	bl	8005ec0 <strncmp>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d118      	bne.n	80007f6 <command+0xfe>
	{
		//printf("GET_K Received\r\n");
		printf("K=%d.%d000\r\n",(int)(K/100),K%100);
 80007c4:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <command+0x180>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a24      	ldr	r2, [pc, #144]	; (800085c <command+0x164>)
 80007ca:	fb82 1203 	smull	r1, r2, r2, r3
 80007ce:	1152      	asrs	r2, r2, #5
 80007d0:	17db      	asrs	r3, r3, #31
 80007d2:	1ad0      	subs	r0, r2, r3
 80007d4:	4b28      	ldr	r3, [pc, #160]	; (8000878 <command+0x180>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a20      	ldr	r2, [pc, #128]	; (800085c <command+0x164>)
 80007da:	fb82 1203 	smull	r1, r2, r2, r3
 80007de:	1151      	asrs	r1, r2, #5
 80007e0:	17da      	asrs	r2, r3, #31
 80007e2:	1a8a      	subs	r2, r1, r2
 80007e4:	2164      	movs	r1, #100	; 0x64
 80007e6:	fb01 f202 	mul.w	r2, r1, r2
 80007ea:	1a9a      	subs	r2, r3, r2
 80007ec:	4601      	mov	r1, r0
 80007ee:	4825      	ldr	r0, [pc, #148]	; (8000884 <command+0x18c>)
 80007f0:	f005 fac8 	bl	8005d84 <iprintf>
 80007f4:	e024      	b.n	8000840 <command+0x148>
	}
	else if (strncmp(bufferTransfert,"GET_A",strlen("GET_A"))==0)
 80007f6:	2205      	movs	r2, #5
 80007f8:	4923      	ldr	r1, [pc, #140]	; (8000888 <command+0x190>)
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f005 fb60 	bl	8005ec0 <strncmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d119      	bne.n	800083a <command+0x142>
	{
		//printf("GET_A Received\r\n");
		printf("A=%d.%d000\r\n",(int)(A/1000),A%1000);
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <command+0x194>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a21      	ldr	r2, [pc, #132]	; (8000890 <command+0x198>)
 800080c:	fb82 1203 	smull	r1, r2, r2, r3
 8000810:	1192      	asrs	r2, r2, #6
 8000812:	17db      	asrs	r3, r3, #31
 8000814:	1ad0      	subs	r0, r2, r3
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <command+0x194>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1d      	ldr	r2, [pc, #116]	; (8000890 <command+0x198>)
 800081c:	fb82 1203 	smull	r1, r2, r2, r3
 8000820:	1191      	asrs	r1, r2, #6
 8000822:	17da      	asrs	r2, r3, #31
 8000824:	1a8a      	subs	r2, r1, r2
 8000826:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800082a:	fb01 f202 	mul.w	r2, r1, r2
 800082e:	1a9a      	subs	r2, r3, r2
 8000830:	4601      	mov	r1, r0
 8000832:	4818      	ldr	r0, [pc, #96]	; (8000894 <command+0x19c>)
 8000834:	f005 faa6 	bl	8005d84 <iprintf>
 8000838:	e002      	b.n	8000840 <command+0x148>
	}
	else
	{
		printf("Command not found\r\n");
 800083a:	4817      	ldr	r0, [pc, #92]	; (8000898 <command+0x1a0>)
 800083c:	f005 fb28 	bl	8005e90 <puts>
	}
	memset(bufferTransfert,NULL,Size*sizeof(char));
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	461a      	mov	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f005 f9b4 	bl	8005bb4 <memset>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	08006e20 	.word	0x08006e20
 8000858:	20000250 	.word	0x20000250
 800085c:	51eb851f 	.word	0x51eb851f
 8000860:	08006e28 	.word	0x08006e28
 8000864:	08006e38 	.word	0x08006e38
 8000868:	2000024c 	.word	0x2000024c
 800086c:	08006e40 	.word	0x08006e40
 8000870:	08006e4c 	.word	0x08006e4c
 8000874:	08006e54 	.word	0x08006e54
 8000878:	20000254 	.word	0x20000254
 800087c:	08006e58 	.word	0x08006e58
 8000880:	08006ec4 	.word	0x08006ec4
 8000884:	08006ecc 	.word	0x08006ecc
 8000888:	08006edc 	.word	0x08006edc
 800088c:	20000258 	.word	0x20000258
 8000890:	10624dd3 	.word	0x10624dd3
 8000894:	08006ee4 	.word	0x08006ee4
 8000898:	08006ef4 	.word	0x08006ef4

0800089c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d11d      	bne.n	80008ee <HAL_UARTEx_RxEventCallback+0x52>
	{
		RxBuf[Size]='\r';
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_UARTEx_RxEventCallback+0x60>)
 80008b6:	210d      	movs	r1, #13
 80008b8:	54d1      	strb	r1, [r2, r3]
		RxBuf[Size+1]='\n';
 80008ba:	887b      	ldrh	r3, [r7, #2]
 80008bc:	3301      	adds	r3, #1
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_UARTEx_RxEventCallback+0x60>)
 80008c0:	210a      	movs	r1, #10
 80008c2:	54d1      	strb	r1, [r2, r3]
		command(RxBuf,Size+2);
 80008c4:	887b      	ldrh	r3, [r7, #2]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	3302      	adds	r3, #2
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4619      	mov	r1, r3
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <HAL_UARTEx_RxEventCallback+0x60>)
 80008d0:	f7ff ff12 	bl	80006f8 <command>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuf, RxBuf_SIZE);
 80008d4:	220c      	movs	r2, #12
 80008d6:	4909      	ldr	r1, [pc, #36]	; (80008fc <HAL_UARTEx_RxEventCallback+0x60>)
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <HAL_UARTEx_RxEventCallback+0x64>)
 80008da:	f003 ffa4 	bl	8004826 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_UARTEx_RxEventCallback+0x68>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <HAL_UARTEx_RxEventCallback+0x68>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 0208 	bic.w	r2, r2, #8
 80008ec:	601a      	str	r2, [r3, #0]
	}
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40004800 	.word	0x40004800
 80008fc:	20000298 	.word	0x20000298
 8000900:	20000194 	.word	0x20000194
 8000904:	200001d8 	.word	0x200001d8

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090e:	f000 fdb5 	bl	800147c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000912:	f000 f8a5 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000916:	f000 fa1f 	bl	8000d58 <MX_GPIO_Init>
  MX_DMA_Init();
 800091a:	f000 f9fd 	bl	8000d18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800091e:	f000 f9a7 	bl	8000c70 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000922:	f000 f9cf 	bl	8000cc4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000926:	f000 f909 	bl	8000b3c <MX_CAN1_Init>
  MX_I2C1_Init();
 800092a:	f000 f93d 	bl	8000ba8 <MX_I2C1_Init>
  MX_TIM7_Init();
 800092e:	f000 f969 	bl	8000c04 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
   uint8_t Register[1] = {0xD0};
 8000932:	23d0      	movs	r3, #208	; 0xd0
 8000934:	733b      	strb	r3, [r7, #12]
   uint8_t Receive[1];
  // HAL_TIM_Base_Start_IT(&htim7);

   HAL_UARTEx_ReceiveToIdle_DMA(&huart3,RxBuf,RxBuf_SIZE);
 8000936:	220c      	movs	r2, #12
 8000938:	493e      	ldr	r1, [pc, #248]	; (8000a34 <main+0x12c>)
 800093a:	483f      	ldr	r0, [pc, #252]	; (8000a38 <main+0x130>)
 800093c:	f003 ff73 	bl	8004826 <HAL_UARTEx_ReceiveToIdle_DMA>
   __HAL_DMA_DISABLE_IT(&hdma_usart3_rx,DMA_IT_HT);
 8000940:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <main+0x134>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <main+0x134>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f022 0208 	bic.w	r2, r2, #8
 800094e:	601a      	str	r2, [r3, #0]





   HAL_CAN_Start(&hcan1);
 8000950:	483b      	ldr	r0, [pc, #236]	; (8000a40 <main+0x138>)
 8000952:	f000 ff24 	bl	800179e <HAL_CAN_Start>
   HAL_Delay(1000);
 8000956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095a:	f000 fe01 	bl	8001560 <HAL_Delay>

   TxHeader.IDE = CAN_ID_STD;
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <main+0x13c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 8000964:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <main+0x13c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = 0x61 ;
 800096a:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <main+0x13c>)
 800096c:	2261      	movs	r2, #97	; 0x61
 800096e:	601a      	str	r2, [r3, #0]
   TxHeader.DLC = 2;
 8000970:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <main+0x13c>)
 8000972:	2202      	movs	r2, #2
 8000974:	611a      	str	r2, [r3, #16]
   TxHeader.TransmitGlobalTime = DISABLE;
 8000976:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <main+0x13c>)
 8000978:	2200      	movs	r2, #0
 800097a:	751a      	strb	r2, [r3, #20]

   TxPosIni.IDE=CAN_ID_STD;
 800097c:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <main+0x140>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
   TxPosIni.IDE = CAN_ID_STD;
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <main+0x140>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
   TxPosIni.RTR = CAN_RTR_DATA;
 8000988:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <main+0x140>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
   TxPosIni.StdId = 0x62 ;
 800098e:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <main+0x140>)
 8000990:	2262      	movs	r2, #98	; 0x62
 8000992:	601a      	str	r2, [r3, #0]
   TxPosIni.DLC = 0;
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <main+0x140>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
   TxPosIni.TransmitGlobalTime = DISABLE;
 800099a:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <main+0x140>)
 800099c:	2200      	movs	r2, #0
 800099e:	751a      	strb	r2, [r3, #20]

   TxData[0]= 90;
 80009a0:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <main+0x144>)
 80009a2:	225a      	movs	r2, #90	; 0x5a
 80009a4:	701a      	strb	r2, [r3, #0]
   TxData[1]= 0;
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <main+0x144>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	705a      	strb	r2, [r3, #1]



   /* Identification du BMP280 */

   HAL_I2C_Master_Transmit(&hi2c1,ADD_BMP, Register ,1, HAL_MAX_DELAY);
 80009ac:	f107 020c 	add.w	r2, r7, #12
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2301      	movs	r3, #1
 80009b8:	21ee      	movs	r1, #238	; 0xee
 80009ba:	4825      	ldr	r0, [pc, #148]	; (8000a50 <main+0x148>)
 80009bc:	f001 ff3a 	bl	8002834 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c1,ADD_BMP, Receive,1,HAL_MAX_DELAY);
 80009c0:	f107 0208 	add.w	r2, r7, #8
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	21ee      	movs	r1, #238	; 0xee
 80009ce:	4820      	ldr	r0, [pc, #128]	; (8000a50 <main+0x148>)
 80009d0:	f002 f82e 	bl	8002a30 <HAL_I2C_Master_Receive>

   printf("valeur : %x \r \n",Receive[0]);
 80009d4:	7a3b      	ldrb	r3, [r7, #8]
 80009d6:	4619      	mov	r1, r3
 80009d8:	481e      	ldr	r0, [pc, #120]	; (8000a54 <main+0x14c>)
 80009da:	f005 f9d3 	bl	8005d84 <iprintf>

   /*----------------------------------------------------------------------------------------------------------*/
     /*configuration du capteur mode normal, Pressure oversampling x16, Temperature oversampling x2 */

   uint8_t config[2]={0xF4,(0b010 << 5) | (0b101 << 2) | (0b11) };
 80009de:	f245 73f4 	movw	r3, #22516	; 0x57f4
 80009e2:	80bb      	strh	r3, [r7, #4]
   uint8_t data[1];

   HAL_I2C_Master_Transmit(&hi2c1,ADD_BMP, config ,2, HAL_MAX_DELAY);
 80009e4:	1d3a      	adds	r2, r7, #4
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2302      	movs	r3, #2
 80009ee:	21ee      	movs	r1, #238	; 0xee
 80009f0:	4817      	ldr	r0, [pc, #92]	; (8000a50 <main+0x148>)
 80009f2:	f001 ff1f 	bl	8002834 <HAL_I2C_Master_Transmit>

   //Teste si c est bien la valeur qu on a envoyé
   HAL_I2C_Master_Transmit(&hi2c1,ADD_BMP, config ,1, HAL_MAX_DELAY);
 80009f6:	1d3a      	adds	r2, r7, #4
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2301      	movs	r3, #1
 8000a00:	21ee      	movs	r1, #238	; 0xee
 8000a02:	4813      	ldr	r0, [pc, #76]	; (8000a50 <main+0x148>)
 8000a04:	f001 ff16 	bl	8002834 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Transmit(&hi2c1,ADD_BMP, data ,1, HAL_MAX_DELAY);
 8000a08:	463a      	mov	r2, r7
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2301      	movs	r3, #1
 8000a12:	21ee      	movs	r1, #238	; 0xee
 8000a14:	480e      	ldr	r0, [pc, #56]	; (8000a50 <main+0x148>)
 8000a16:	f001 ff0d 	bl	8002834 <HAL_I2C_Master_Transmit>

   printf("config : %x \r \n",data[0]);
 8000a1a:	783b      	ldrb	r3, [r7, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <main+0x150>)
 8000a20:	f005 f9b0 	bl	8005d84 <iprintf>

   /*-------------------------------*/



   pression=BMP280_get_pressure();
 8000a24:	f7ff fe36 	bl	8000694 <BMP280_get_pressure>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <main+0x154>)
 8000a2c:	6013      	str	r3, [r2, #0]

   //printf("Pressssss : %d \r \n",pression);

   BMP280_get_temperature();
 8000a2e:	f7ff fdff 	bl	8000630 <BMP280_get_temperature>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <main+0x12a>
 8000a34:	20000298 	.word	0x20000298
 8000a38:	20000194 	.word	0x20000194
 8000a3c:	200001d8 	.word	0x200001d8
 8000a40:	2000008c 	.word	0x2000008c
 8000a44:	2000025c 	.word	0x2000025c
 8000a48:	20000274 	.word	0x20000274
 8000a4c:	2000028c 	.word	0x2000028c
 8000a50:	200000b4 	.word	0x200000b4
 8000a54:	08006f08 	.word	0x08006f08
 8000a58:	08006f18 	.word	0x08006f18
 8000a5c:	20000248 	.word	0x20000248

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2234      	movs	r2, #52	; 0x34
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f005 f8a0 	bl	8005bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <SystemClock_Config+0xd4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a29      	ldr	r2, [pc, #164]	; (8000b34 <SystemClock_Config+0xd4>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <SystemClock_Config+0xd4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <SystemClock_Config+0xd8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aac:	4a22      	ldr	r2, [pc, #136]	; (8000b38 <SystemClock_Config+0xd8>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <SystemClock_Config+0xd8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ad8:	2354      	movs	r3, #84	; 0x54
 8000ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 f83d 	bl	8003b6c <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000af8:	f000 f9bc 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	2302      	movs	r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fcdc 	bl	80034d8 <HAL_RCC_ClockConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b26:	f000 f9a5 	bl	8000e74 <Error_Handler>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3750      	adds	r7, #80	; 0x50
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40007000 	.word	0x40007000

08000b3c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b42:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <MX_CAN1_Init+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b48:	2215      	movs	r2, #21
 8000b4a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b5e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_CAN1_Init+0x64>)
 8000b8c:	f000 fd0c 	bl	80015a8 <HAL_CAN_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000b96:	f000 f96d 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000008c 	.word	0x2000008c
 8000ba4:	40006400 	.word	0x40006400

08000ba8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_I2C1_Init+0x50>)
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <MX_I2C1_Init+0x54>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_I2C1_Init+0x50>)
 8000bb4:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_I2C1_Init+0x58>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_I2C1_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_I2C1_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_I2C1_Init+0x50>)
 8000bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_I2C1_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_I2C1_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_I2C1_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_I2C1_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_I2C1_Init+0x50>)
 8000be6:	f001 fce1 	bl	80025ac <HAL_I2C_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bf0:	f000 f940 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200000b4 	.word	0x200000b4
 8000bfc:	40005400 	.word	0x40005400
 8000c00:	000186a0 	.word	0x000186a0

08000c04 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_TIM7_Init+0x64>)
 8000c14:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <MX_TIM7_Init+0x68>)
 8000c16:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_TIM7_Init+0x64>)
 8000c1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c1e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_TIM7_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 39999;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_TIM7_Init+0x64>)
 8000c28:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000c2c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_TIM7_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <MX_TIM7_Init+0x64>)
 8000c36:	f003 fa37 	bl	80040a8 <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000c40:	f000 f918 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_TIM7_Init+0x64>)
 8000c52:	f003 fc49 	bl	80044e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000c5c:	f000 f90a 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000108 	.word	0x20000108
 8000c6c:	40001400 	.word	0x40001400

08000c70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <MX_USART2_UART_Init+0x50>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000ca8:	f003 fcae 	bl	8004608 <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cb2:	f000 f8df 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000150 	.word	0x20000150
 8000cc0:	40004400 	.word	0x40004400

08000cc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <MX_USART3_UART_Init+0x50>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cfc:	f003 fc84 	bl	8004608 <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d06:	f000 f8b5 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000194 	.word	0x20000194
 8000d14:	40004800 	.word	0x40004800

08000d18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_DMA_Init+0x3c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <MX_DMA_Init+0x3c>)
 8000d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_DMA_Init+0x3c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	200c      	movs	r0, #12
 8000d40:	f000 fe4d 	bl	80019de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d44:	200c      	movs	r0, #12
 8000d46:	f000 fe66 	bl	8001a16 <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a2c      	ldr	r2, [pc, #176]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2120      	movs	r1, #32
 8000de2:	4812      	ldr	r0, [pc, #72]	; (8000e2c <MX_GPIO_Init+0xd4>)
 8000de4:	f001 fbc8 	bl	8002578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_GPIO_Init+0xd8>)
 8000e00:	f001 fa26 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e04:	2320      	movs	r3, #32
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_GPIO_Init+0xd4>)
 8000e1c:	f001 fa18 	bl	8002250 <HAL_GPIO_Init>

}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020800 	.word	0x40020800

08000e34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_UART_RxCpltCallback+0x20>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000e42:	220a      	movs	r2, #10
 8000e44:	4904      	ldr	r1, [pc, #16]	; (8000e58 <HAL_UART_RxCpltCallback+0x24>)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <HAL_UART_RxCpltCallback+0x28>)
 8000e48:	f003 fcbd 	bl	80047c6 <HAL_UART_Receive_IT>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000244 	.word	0x20000244
 8000e58:	20000238 	.word	0x20000238
 8000e5c:	20000194 	.word	0x20000194

08000e60 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ebe:	2007      	movs	r0, #7
 8000ec0:	f000 fd82 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_CAN_MspInit+0x84>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12c      	bne.n	8000f4c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_CAN_MspInit+0x88>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_CAN_MspInit+0x88>)
 8000efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_CAN_MspInit+0x88>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_CAN_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_CAN_MspInit+0x88>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_CAN_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_CAN_MspInit+0x8c>)
 8000f48:	f001 f982 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40006400 	.word	0x40006400
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020400 	.word	0x40020400

08000f60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <HAL_I2C_MspInit+0x84>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12b      	bne.n	8000fda <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_I2C_MspInit+0x88>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <HAL_I2C_MspInit+0x88>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_I2C_MspInit+0x88>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f9e:	23c0      	movs	r3, #192	; 0xc0
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa2:	2312      	movs	r3, #18
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <HAL_I2C_MspInit+0x8c>)
 8000fba:	f001 f949 	bl	8002250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_I2C_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_I2C_MspInit+0x88>)
 8000fc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_I2C_MspInit+0x88>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020400 	.word	0x40020400

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_TIM_Base_MspInit+0x48>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d115      	bne.n	800102e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_TIM_Base_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <HAL_TIM_Base_MspInit+0x4c>)
 800100c:	f043 0320 	orr.w	r3, r3, #32
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_TIM_Base_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 0320 	and.w	r3, r3, #32
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2037      	movs	r0, #55	; 0x37
 8001024:	f000 fcdb 	bl	80019de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001028:	2037      	movs	r0, #55	; 0x37
 800102a:	f000 fcf4 	bl	8001a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40001400 	.word	0x40001400
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a5d      	ldr	r2, [pc, #372]	; (80011d4 <HAL_UART_MspInit+0x194>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12c      	bne.n	80010bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	4b5c      	ldr	r3, [pc, #368]	; (80011d8 <HAL_UART_MspInit+0x198>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a5b      	ldr	r2, [pc, #364]	; (80011d8 <HAL_UART_MspInit+0x198>)
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b59      	ldr	r3, [pc, #356]	; (80011d8 <HAL_UART_MspInit+0x198>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	4b55      	ldr	r3, [pc, #340]	; (80011d8 <HAL_UART_MspInit+0x198>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a54      	ldr	r2, [pc, #336]	; (80011d8 <HAL_UART_MspInit+0x198>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b52      	ldr	r3, [pc, #328]	; (80011d8 <HAL_UART_MspInit+0x198>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800109a:	230c      	movs	r3, #12
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010aa:	2307      	movs	r3, #7
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4849      	ldr	r0, [pc, #292]	; (80011dc <HAL_UART_MspInit+0x19c>)
 80010b6:	f001 f8cb 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ba:	e086      	b.n	80011ca <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a47      	ldr	r2, [pc, #284]	; (80011e0 <HAL_UART_MspInit+0x1a0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	f040 8081 	bne.w	80011ca <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <HAL_UART_MspInit+0x198>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a41      	ldr	r2, [pc, #260]	; (80011d8 <HAL_UART_MspInit+0x198>)
 80010d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <HAL_UART_MspInit+0x198>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_UART_MspInit+0x198>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4a3a      	ldr	r2, [pc, #232]	; (80011d8 <HAL_UART_MspInit+0x198>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
 80010f4:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HAL_UART_MspInit+0x198>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <HAL_UART_MspInit+0x198>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	4a33      	ldr	r2, [pc, #204]	; (80011d8 <HAL_UART_MspInit+0x198>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	6313      	str	r3, [r2, #48]	; 0x30
 8001110:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <HAL_UART_MspInit+0x198>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800111c:	2320      	movs	r3, #32
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800112c:	2307      	movs	r3, #7
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	482b      	ldr	r0, [pc, #172]	; (80011e4 <HAL_UART_MspInit+0x1a4>)
 8001138:	f001 f88a 	bl	8002250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800113c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800114e:	2307      	movs	r3, #7
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4823      	ldr	r0, [pc, #140]	; (80011e8 <HAL_UART_MspInit+0x1a8>)
 800115a:	f001 f879 	bl	8002250 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 8001160:	4a23      	ldr	r2, [pc, #140]	; (80011f0 <HAL_UART_MspInit+0x1b0>)
 8001162:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 8001166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800116a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 800117a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800119e:	4813      	ldr	r0, [pc, #76]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 80011a0:	f000 fc54 	bl	8001a4c <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80011aa:	f7ff fe63 	bl	8000e74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 80011b2:	639a      	str	r2, [r3, #56]	; 0x38
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_UART_MspInit+0x1ac>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2027      	movs	r0, #39	; 0x27
 80011c0:	f000 fc0d 	bl	80019de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011c4:	2027      	movs	r0, #39	; 0x27
 80011c6:	f000 fc26 	bl	8001a16 <HAL_NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3730      	adds	r7, #48	; 0x30
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40004400 	.word	0x40004400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40004800 	.word	0x40004800
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020400 	.word	0x40020400
 80011ec:	200001d8 	.word	0x200001d8
 80011f0:	40026028 	.word	0x40026028

080011f4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80011fc:	1d39      	adds	r1, r7, #4
 80011fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001202:	2201      	movs	r2, #1
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <__io_putchar+0x30>)
 8001206:	f003 fa4c 	bl	80046a2 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800120a:	1d39      	adds	r1, r7, #4
 800120c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001210:	2201      	movs	r2, #1
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <__io_putchar+0x34>)
 8001214:	f003 fa45 	bl	80046a2 <HAL_UART_Transmit>

  return ch;
 8001218:	687b      	ldr	r3, [r7, #4]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000150 	.word	0x20000150
 8001228:	20000194 	.word	0x20000194

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f952 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <DMA1_Stream1_IRQHandler+0x10>)
 8001286:	f000 fd79 	bl	8001d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001d8 	.word	0x200001d8

08001294 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <USART3_IRQHandler+0x10>)
 800129a:	f003 fb29 	bl	80048f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000194 	.word	0x20000194

080012a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <TIM7_IRQHandler+0x10>)
 80012ae:	f002 ff4a 	bl	8004146 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000108 	.word	0x20000108

080012bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
	}

return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e009      	b.n	800131c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff6f 	bl	80011f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf1      	blt.n	8001308 <_write+0x12>
	}
	return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_close>:

int _close(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	605a      	str	r2, [r3, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
	return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f004 fbba 	bl	8005b40 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20020000 	.word	0x20020000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	200002a4 	.word	0x200002a4
 8001400:	200002c0 	.word	0x200002c0

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001444:	4c0b      	ldr	r4, [pc, #44]	; (8001474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001452:	f7ff ffd7 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f004 fb79 	bl	8005b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff fa55 	bl	8000908 <main>
  bx  lr    
 800145e:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8001460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800146c:	080070f4 	.word	0x080070f4
  ldr r2, =_sbss
 8001470:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001474:	200002bc 	.word	0x200002bc

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>
	...

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <HAL_Init+0x40>)
 8001486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_Init+0x40>)
 8001492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x40>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 fa8f 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fce6 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 faa7 	bl	8001a32 <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 fa6f 	bl	80019de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	20000008 	.word	0x20000008
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	200002a8 	.word	0x200002a8

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	200002a8 	.word	0x200002a8

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008

080015a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0ed      	b.n	8001796 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fc82 	bl	8000ed0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015dc:	f7ff ffb4 	bl	8001548 <HAL_GetTick>
 80015e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015e2:	e012      	b.n	800160a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015e4:	f7ff ffb0 	bl	8001548 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b0a      	cmp	r3, #10
 80015f0:	d90b      	bls.n	800160a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2205      	movs	r2, #5
 8001602:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0c5      	b.n	8001796 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0e5      	beq.n	80015e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0202 	bic.w	r2, r2, #2
 8001626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001628:	f7ff ff8e 	bl	8001548 <HAL_GetTick>
 800162c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800162e:	e012      	b.n	8001656 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001630:	f7ff ff8a 	bl	8001548 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b0a      	cmp	r3, #10
 800163c:	d90b      	bls.n	8001656 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2205      	movs	r2, #5
 800164e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e09f      	b.n	8001796 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e5      	bne.n	8001630 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7e1b      	ldrb	r3, [r3, #24]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e007      	b.n	800168e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7e5b      	ldrb	r3, [r3, #25]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e007      	b.n	80016b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7e9b      	ldrb	r3, [r3, #26]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0220 	orr.w	r2, r2, #32
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e007      	b.n	80016e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0220 	bic.w	r2, r2, #32
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7edb      	ldrb	r3, [r3, #27]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d108      	bne.n	80016fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0210 	bic.w	r2, r2, #16
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e007      	b.n	800170c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0210 	orr.w	r2, r2, #16
 800170a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7f1b      	ldrb	r3, [r3, #28]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0208 	orr.w	r2, r2, #8
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e007      	b.n	8001736 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0208 	bic.w	r2, r2, #8
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7f5b      	ldrb	r3, [r3, #29]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0204 	orr.w	r2, r2, #4
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e007      	b.n	8001760 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0204 	bic.w	r2, r2, #4
 800175e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	ea42 0103 	orr.w	r1, r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	1e5a      	subs	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d12e      	bne.n	8001810 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2202      	movs	r2, #2
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0201 	bic.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017ca:	f7ff febd 	bl	8001548 <HAL_GetTick>
 80017ce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017d0:	e012      	b.n	80017f8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017d2:	f7ff feb9 	bl	8001548 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b0a      	cmp	r3, #10
 80017de:	d90b      	bls.n	80017f8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2205      	movs	r2, #5
 80017f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e012      	b.n	800181e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1e5      	bne.n	80017d2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e006      	b.n	800181e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
  }
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <__NVIC_GetPriorityGrouping+0x18>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0307 	and.w	r3, r3, #7
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4907      	ldr	r1, [pc, #28]	; (80018c4 <__NVIC_EnableIRQ+0x38>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001994:	d301      	bcc.n	800199a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001996:	2301      	movs	r3, #1
 8001998:	e00f      	b.n	80019ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <SysTick_Config+0x40>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a2:	210f      	movs	r1, #15
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f7ff ff8e 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <SysTick_Config+0x40>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <SysTick_Config+0x40>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000e010 	.word	0xe000e010

080019c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff29 	bl	8001828 <__NVIC_SetPriorityGrouping>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f0:	f7ff ff3e 	bl	8001870 <__NVIC_GetPriorityGrouping>
 80019f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	6978      	ldr	r0, [r7, #20]
 80019fc:	f7ff ff8e 	bl	800191c <NVIC_EncodePriority>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff5d 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff31 	bl	800188c <__NVIC_EnableIRQ>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffa2 	bl	8001984 <SysTick_Config>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff fd76 	bl	8001548 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e099      	b.n	8001b9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a88:	e00f      	b.n	8001aaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a8a:	f7ff fd5d 	bl	8001548 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d908      	bls.n	8001aaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e078      	b.n	8001b9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e8      	bne.n	8001a8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <HAL_DMA_Init+0x158>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d107      	bne.n	8001b14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f023 0307 	bic.w	r3, r3, #7
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d117      	bne.n	8001b6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00e      	beq.n	8001b6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fb01 	bl	8002158 <DMA_CheckFifoParam>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2240      	movs	r2, #64	; 0x40
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e016      	b.n	8001b9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fab8 	bl	80020ec <DMA_CalcBaseAndBitshift>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	223f      	movs	r2, #63	; 0x3f
 8001b86:	409a      	lsls	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	f010803f 	.word	0xf010803f

08001ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_DMA_Start_IT+0x26>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e040      	b.n	8001c50 <HAL_DMA_Start_IT+0xa8>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d12f      	bne.n	8001c42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2202      	movs	r2, #2
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fa4a 	bl	8002090 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c00:	223f      	movs	r2, #63	; 0x3f
 8001c02:	409a      	lsls	r2, r3
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0216 	orr.w	r2, r2, #22
 8001c16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0208 	orr.w	r2, r2, #8
 8001c2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e005      	b.n	8001c4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c66:	f7ff fc6f 	bl	8001548 <HAL_GetTick>
 8001c6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d008      	beq.n	8001c8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2280      	movs	r2, #128	; 0x80
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e052      	b.n	8001d30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0216 	bic.w	r2, r2, #22
 8001c98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HAL_DMA_Abort+0x62>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0208 	bic.w	r2, r2, #8
 8001cc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cda:	e013      	b.n	8001d04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cdc:	f7ff fc34 	bl	8001548 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d90c      	bls.n	8001d04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2220      	movs	r2, #32
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e015      	b.n	8001d30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1e4      	bne.n	8001cdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	223f      	movs	r2, #63	; 0x3f
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d004      	beq.n	8001d56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00c      	b.n	8001d70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2205      	movs	r2, #5
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d88:	4b8e      	ldr	r3, [pc, #568]	; (8001fc4 <HAL_DMA_IRQHandler+0x248>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a8e      	ldr	r2, [pc, #568]	; (8001fc8 <HAL_DMA_IRQHandler+0x24c>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	0a9b      	lsrs	r3, r3, #10
 8001d94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	2208      	movs	r2, #8
 8001da8:	409a      	lsls	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d01a      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0204 	bic.w	r2, r2, #4
 8001dce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	2201      	movs	r2, #1
 8001dee:	409a      	lsls	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d012      	beq.n	8001e1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	2204      	movs	r2, #4
 8001e24:	409a      	lsls	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d012      	beq.n	8001e54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	2204      	movs	r2, #4
 8001e42:	409a      	lsls	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	f043 0204 	orr.w	r2, r3, #4
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	2210      	movs	r2, #16
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d043      	beq.n	8001eec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d03c      	beq.n	8001eec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e76:	2210      	movs	r2, #16
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d018      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d108      	bne.n	8001eac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d024      	beq.n	8001eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	4798      	blx	r3
 8001eaa:	e01f      	b.n	8001eec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01b      	beq.n	8001eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
 8001ebc:	e016      	b.n	8001eec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0208 	bic.w	r2, r2, #8
 8001eda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 808f 	beq.w	800201c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 8087 	beq.w	800201c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2220      	movs	r2, #32
 8001f14:	409a      	lsls	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d136      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0216 	bic.w	r2, r2, #22
 8001f34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d103      	bne.n	8001f56 <HAL_DMA_IRQHandler+0x1da>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0208 	bic.w	r2, r2, #8
 8001f64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	223f      	movs	r2, #63	; 0x3f
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d07e      	beq.n	8002088 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
        }
        return;
 8001f92:	e079      	b.n	8002088 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01d      	beq.n	8001fde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10d      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d031      	beq.n	800201c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
 8001fc0:	e02c      	b.n	800201c <HAL_DMA_IRQHandler+0x2a0>
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d023      	beq.n	800201c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
 8001fdc:	e01e      	b.n	800201c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10f      	bne.n	800200c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0210 	bic.w	r2, r2, #16
 8001ffa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	2b00      	cmp	r3, #0
 8002022:	d032      	beq.n	800208a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d022      	beq.n	8002076 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2205      	movs	r2, #5
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3301      	adds	r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	429a      	cmp	r2, r3
 8002052:	d307      	bcc.n	8002064 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f2      	bne.n	8002048 <HAL_DMA_IRQHandler+0x2cc>
 8002062:	e000      	b.n	8002066 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002064:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
 8002086:	e000      	b.n	800208a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002088:	bf00      	nop
    }
  }
}
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d108      	bne.n	80020d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ce:	e007      	b.n	80020e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	60da      	str	r2, [r3, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	3b10      	subs	r3, #16
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <DMA_CalcBaseAndBitshift+0x64>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002106:	4a13      	ldr	r2, [pc, #76]	; (8002154 <DMA_CalcBaseAndBitshift+0x68>)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d909      	bls.n	800212e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002122:	f023 0303 	bic.w	r3, r3, #3
 8002126:	1d1a      	adds	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	659a      	str	r2, [r3, #88]	; 0x58
 800212c:	e007      	b.n	800213e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	aaaaaaab 	.word	0xaaaaaaab
 8002154:	08006f40 	.word	0x08006f40

08002158 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d11f      	bne.n	80021b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d856      	bhi.n	8002226 <DMA_CheckFifoParam+0xce>
 8002178:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <DMA_CheckFifoParam+0x28>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	08002191 	.word	0x08002191
 8002184:	080021a3 	.word	0x080021a3
 8002188:	08002191 	.word	0x08002191
 800218c:	08002227 	.word	0x08002227
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d046      	beq.n	800222a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a0:	e043      	b.n	800222a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021aa:	d140      	bne.n	800222e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b0:	e03d      	b.n	800222e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ba:	d121      	bne.n	8002200 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d837      	bhi.n	8002232 <DMA_CheckFifoParam+0xda>
 80021c2:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <DMA_CheckFifoParam+0x70>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021df 	.word	0x080021df
 80021d0:	080021d9 	.word	0x080021d9
 80021d4:	080021f1 	.word	0x080021f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
      break;
 80021dc:	e030      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d025      	beq.n	8002236 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ee:	e022      	b.n	8002236 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021f8:	d11f      	bne.n	800223a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021fe:	e01c      	b.n	800223a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d903      	bls.n	800220e <DMA_CheckFifoParam+0xb6>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d003      	beq.n	8002214 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800220c:	e018      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
      break;
 8002212:	e015      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00e      	beq.n	800223e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      break;
 8002224:	e00b      	b.n	800223e <DMA_CheckFifoParam+0xe6>
      break;
 8002226:	bf00      	nop
 8002228:	e00a      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 800222a:	bf00      	nop
 800222c:	e008      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
 8002230:	e006      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e004      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e002      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;   
 800223a:	bf00      	nop
 800223c:	e000      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
    }
  } 
  
  return status; 
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	e165      	b.n	8002538 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800226c:	2201      	movs	r2, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	429a      	cmp	r2, r3
 8002286:	f040 8154 	bne.w	8002532 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d005      	beq.n	80022a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d130      	bne.n	8002304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	2203      	movs	r2, #3
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d8:	2201      	movs	r2, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 0201 	and.w	r2, r3, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b03      	cmp	r3, #3
 800230e:	d017      	beq.n	8002340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d123      	bne.n	8002394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	08da      	lsrs	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3208      	adds	r2, #8
 8002354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	220f      	movs	r2, #15
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	08da      	lsrs	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3208      	adds	r2, #8
 800238e:	69b9      	ldr	r1, [r7, #24]
 8002390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	2203      	movs	r2, #3
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0203 	and.w	r2, r3, #3
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80ae 	beq.w	8002532 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b5d      	ldr	r3, [pc, #372]	; (8002550 <HAL_GPIO_Init+0x300>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	4a5c      	ldr	r2, [pc, #368]	; (8002550 <HAL_GPIO_Init+0x300>)
 80023e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e4:	6453      	str	r3, [r2, #68]	; 0x44
 80023e6:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <HAL_GPIO_Init+0x300>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f2:	4a58      	ldr	r2, [pc, #352]	; (8002554 <HAL_GPIO_Init+0x304>)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	3302      	adds	r3, #2
 80023fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_GPIO_Init+0x308>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d025      	beq.n	800246a <HAL_GPIO_Init+0x21a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4e      	ldr	r2, [pc, #312]	; (800255c <HAL_GPIO_Init+0x30c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01f      	beq.n	8002466 <HAL_GPIO_Init+0x216>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4d      	ldr	r2, [pc, #308]	; (8002560 <HAL_GPIO_Init+0x310>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d019      	beq.n	8002462 <HAL_GPIO_Init+0x212>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4c      	ldr	r2, [pc, #304]	; (8002564 <HAL_GPIO_Init+0x314>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <HAL_GPIO_Init+0x20e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4b      	ldr	r2, [pc, #300]	; (8002568 <HAL_GPIO_Init+0x318>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00d      	beq.n	800245a <HAL_GPIO_Init+0x20a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4a      	ldr	r2, [pc, #296]	; (800256c <HAL_GPIO_Init+0x31c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d007      	beq.n	8002456 <HAL_GPIO_Init+0x206>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a49      	ldr	r2, [pc, #292]	; (8002570 <HAL_GPIO_Init+0x320>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_GPIO_Init+0x202>
 800244e:	2306      	movs	r3, #6
 8002450:	e00c      	b.n	800246c <HAL_GPIO_Init+0x21c>
 8002452:	2307      	movs	r3, #7
 8002454:	e00a      	b.n	800246c <HAL_GPIO_Init+0x21c>
 8002456:	2305      	movs	r3, #5
 8002458:	e008      	b.n	800246c <HAL_GPIO_Init+0x21c>
 800245a:	2304      	movs	r3, #4
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x21c>
 800245e:	2303      	movs	r3, #3
 8002460:	e004      	b.n	800246c <HAL_GPIO_Init+0x21c>
 8002462:	2302      	movs	r3, #2
 8002464:	e002      	b.n	800246c <HAL_GPIO_Init+0x21c>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x21c>
 800246a:	2300      	movs	r3, #0
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	f002 0203 	and.w	r2, r2, #3
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	4093      	lsls	r3, r2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800247c:	4935      	ldr	r1, [pc, #212]	; (8002554 <HAL_GPIO_Init+0x304>)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248a:	4b3a      	ldr	r3, [pc, #232]	; (8002574 <HAL_GPIO_Init+0x324>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ae:	4a31      	ldr	r2, [pc, #196]	; (8002574 <HAL_GPIO_Init+0x324>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b4:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_GPIO_Init+0x324>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d8:	4a26      	ldr	r2, [pc, #152]	; (8002574 <HAL_GPIO_Init+0x324>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024de:	4b25      	ldr	r3, [pc, #148]	; (8002574 <HAL_GPIO_Init+0x324>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002502:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_GPIO_Init+0x324>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_GPIO_Init+0x324>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252c:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_GPIO_Init+0x324>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3301      	adds	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b0f      	cmp	r3, #15
 800253c:	f67f ae96 	bls.w	800226c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40013800 	.word	0x40013800
 8002558:	40020000 	.word	0x40020000
 800255c:	40020400 	.word	0x40020400
 8002560:	40020800 	.word	0x40020800
 8002564:	40020c00 	.word	0x40020c00
 8002568:	40021000 	.word	0x40021000
 800256c:	40021400 	.word	0x40021400
 8002570:	40021800 	.word	0x40021800
 8002574:	40013c00 	.word	0x40013c00

08002578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
 8002584:	4613      	mov	r3, r2
 8002586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002588:	787b      	ldrb	r3, [r7, #1]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002594:	e003      	b.n	800259e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e12b      	b.n	8002816 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fcc4 	bl	8000f60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	; 0x24
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800260e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002610:	f001 f854 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 8002614:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a81      	ldr	r2, [pc, #516]	; (8002820 <HAL_I2C_Init+0x274>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d807      	bhi.n	8002630 <HAL_I2C_Init+0x84>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a80      	ldr	r2, [pc, #512]	; (8002824 <HAL_I2C_Init+0x278>)
 8002624:	4293      	cmp	r3, r2
 8002626:	bf94      	ite	ls
 8002628:	2301      	movls	r3, #1
 800262a:	2300      	movhi	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	e006      	b.n	800263e <HAL_I2C_Init+0x92>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a7d      	ldr	r2, [pc, #500]	; (8002828 <HAL_I2C_Init+0x27c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	bf94      	ite	ls
 8002638:	2301      	movls	r3, #1
 800263a:	2300      	movhi	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0e7      	b.n	8002816 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a78      	ldr	r2, [pc, #480]	; (800282c <HAL_I2C_Init+0x280>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0c9b      	lsrs	r3, r3, #18
 8002650:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	430a      	orrs	r2, r1
 8002664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a6a      	ldr	r2, [pc, #424]	; (8002820 <HAL_I2C_Init+0x274>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d802      	bhi.n	8002680 <HAL_I2C_Init+0xd4>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	3301      	adds	r3, #1
 800267e:	e009      	b.n	8002694 <HAL_I2C_Init+0xe8>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	4a69      	ldr	r2, [pc, #420]	; (8002830 <HAL_I2C_Init+0x284>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	3301      	adds	r3, #1
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	430b      	orrs	r3, r1
 800269a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	495c      	ldr	r1, [pc, #368]	; (8002820 <HAL_I2C_Init+0x274>)
 80026b0:	428b      	cmp	r3, r1
 80026b2:	d819      	bhi.n	80026e8 <HAL_I2C_Init+0x13c>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e59      	subs	r1, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c2:	1c59      	adds	r1, r3, #1
 80026c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026c8:	400b      	ands	r3, r1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_I2C_Init+0x138>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1e59      	subs	r1, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e2:	e051      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 80026e4:	2304      	movs	r3, #4
 80026e6:	e04f      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d111      	bne.n	8002714 <HAL_I2C_Init+0x168>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1e58      	subs	r0, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	440b      	add	r3, r1
 80026fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e012      	b.n	800273a <HAL_I2C_Init+0x18e>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1e58      	subs	r0, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	0099      	lsls	r1, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	fbb0 f3f3 	udiv	r3, r0, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Init+0x196>
 800273e:	2301      	movs	r3, #1
 8002740:	e022      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10e      	bne.n	8002768 <HAL_I2C_Init+0x1bc>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1e58      	subs	r0, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	440b      	add	r3, r1
 8002758:	fbb0 f3f3 	udiv	r3, r0, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002766:	e00f      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e58      	subs	r0, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	0099      	lsls	r1, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	fbb0 f3f3 	udiv	r3, r0, r3
 800277e:	3301      	adds	r3, #1
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	6809      	ldr	r1, [r1, #0]
 800278c:	4313      	orrs	r3, r2
 800278e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6911      	ldr	r1, [r2, #16]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68d2      	ldr	r2, [r2, #12]
 80027c2:	4311      	orrs	r1, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	000186a0 	.word	0x000186a0
 8002824:	001e847f 	.word	0x001e847f
 8002828:	003d08ff 	.word	0x003d08ff
 800282c:	431bde83 	.word	0x431bde83
 8002830:	10624dd3 	.word	0x10624dd3

08002834 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	461a      	mov	r2, r3
 8002840:	460b      	mov	r3, r1
 8002842:	817b      	strh	r3, [r7, #10]
 8002844:	4613      	mov	r3, r2
 8002846:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7fe fe7e 	bl	8001548 <HAL_GetTick>
 800284c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b20      	cmp	r3, #32
 8002858:	f040 80e0 	bne.w	8002a1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2319      	movs	r3, #25
 8002862:	2201      	movs	r2, #1
 8002864:	4970      	ldr	r1, [pc, #448]	; (8002a28 <HAL_I2C_Master_Transmit+0x1f4>)
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fc58 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
 8002874:	e0d3      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_I2C_Master_Transmit+0x50>
 8002880:	2302      	movs	r3, #2
 8002882:	e0cc      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x1ea>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d007      	beq.n	80028aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0201 	orr.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2221      	movs	r2, #33	; 0x21
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2210      	movs	r2, #16
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	893a      	ldrh	r2, [r7, #8]
 80028da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a50      	ldr	r2, [pc, #320]	; (8002a2c <HAL_I2C_Master_Transmit+0x1f8>)
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028ec:	8979      	ldrh	r1, [r7, #10]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	6a3a      	ldr	r2, [r7, #32]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fac2 	bl	8002e7c <I2C_MasterRequestWrite>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e08d      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002918:	e066      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	6a39      	ldr	r1, [r7, #32]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fcd2 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2b04      	cmp	r3, #4
 8002930:	d107      	bne.n	8002942 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002940:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e06b      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	781a      	ldrb	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b04      	cmp	r3, #4
 8002982:	d11b      	bne.n	80029bc <HAL_I2C_Master_Transmit+0x188>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	2b00      	cmp	r3, #0
 800298a:	d017      	beq.n	80029bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	781a      	ldrb	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	6a39      	ldr	r1, [r7, #32]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fcc2 	bl	800334a <I2C_WaitOnBTFFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00d      	beq.n	80029e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d107      	bne.n	80029e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e01a      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d194      	bne.n	800291a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
  }
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	00100002 	.word	0x00100002
 8002a2c:	ffff0000 	.word	0xffff0000

08002a30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08c      	sub	sp, #48	; 0x30
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	817b      	strh	r3, [r7, #10]
 8002a40:	4613      	mov	r3, r2
 8002a42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7fe fd80 	bl	8001548 <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	f040 820b 	bne.w	8002e6e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2319      	movs	r3, #25
 8002a5e:	2201      	movs	r2, #1
 8002a60:	497c      	ldr	r1, [pc, #496]	; (8002c54 <HAL_I2C_Master_Receive+0x224>)
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fb5a 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e1fe      	b.n	8002e70 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_I2C_Master_Receive+0x50>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e1f7      	b.n	8002e70 <HAL_I2C_Master_Receive+0x440>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d007      	beq.n	8002aa6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2222      	movs	r2, #34	; 0x22
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	893a      	ldrh	r2, [r7, #8]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a5c      	ldr	r2, [pc, #368]	; (8002c58 <HAL_I2C_Master_Receive+0x228>)
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ae8:	8979      	ldrh	r1, [r7, #10]
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fa46 	bl	8002f80 <I2C_MasterRequestRead>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e1b8      	b.n	8002e70 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d113      	bne.n	8002b2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	623b      	str	r3, [r7, #32]
 8002b1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	e18c      	b.n	8002e48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d11b      	bne.n	8002b6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e16c      	b.n	8002e48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d11b      	bne.n	8002bae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	e14c      	b.n	8002e48 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bd4:	e138      	b.n	8002e48 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	f200 80f1 	bhi.w	8002dc2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d123      	bne.n	8002c30 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fbed 	bl	80033cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e139      	b.n	8002e70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c2e:	e10b      	b.n	8002e48 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d14e      	bne.n	8002cd6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	2200      	movs	r2, #0
 8002c40:	4906      	ldr	r1, [pc, #24]	; (8002c5c <HAL_I2C_Master_Receive+0x22c>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fa6a 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e10e      	b.n	8002e70 <HAL_I2C_Master_Receive+0x440>
 8002c52:	bf00      	nop
 8002c54:	00100002 	.word	0x00100002
 8002c58:	ffff0000 	.word	0xffff0000
 8002c5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cd4:	e0b8      	b.n	8002e48 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4966      	ldr	r1, [pc, #408]	; (8002e78 <HAL_I2C_Master_Receive+0x448>)
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fa1b 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0bf      	b.n	8002e70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	2200      	movs	r2, #0
 8002d3a:	494f      	ldr	r1, [pc, #316]	; (8002e78 <HAL_I2C_Master_Receive+0x448>)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f9ed 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e091      	b.n	8002e70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dc0:	e042      	b.n	8002e48 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fb00 	bl	80033cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e04c      	b.n	8002e70 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d118      	bne.n	8002e48 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f47f aec2 	bne.w	8002bd6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	00010004 	.word	0x00010004

08002e7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d006      	beq.n	8002ea6 <I2C_MasterRequestWrite+0x2a>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d003      	beq.n	8002ea6 <I2C_MasterRequestWrite+0x2a>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ea4:	d108      	bne.n	8002eb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e00b      	b.n	8002ed0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	2b12      	cmp	r3, #18
 8002ebe:	d107      	bne.n	8002ed0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ece:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f91d 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00d      	beq.n	8002f04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef6:	d103      	bne.n	8002f00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e035      	b.n	8002f70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f0c:	d108      	bne.n	8002f20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f0e:	897b      	ldrh	r3, [r7, #10]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f1c:	611a      	str	r2, [r3, #16]
 8002f1e:	e01b      	b.n	8002f58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f20:	897b      	ldrh	r3, [r7, #10]
 8002f22:	11db      	asrs	r3, r3, #7
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 0306 	and.w	r3, r3, #6
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f063 030f 	orn	r3, r3, #15
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	490e      	ldr	r1, [pc, #56]	; (8002f78 <I2C_MasterRequestWrite+0xfc>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f943 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e010      	b.n	8002f70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f4e:	897b      	ldrh	r3, [r7, #10]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4907      	ldr	r1, [pc, #28]	; (8002f7c <I2C_MasterRequestWrite+0x100>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f933 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	00010008 	.word	0x00010008
 8002f7c:	00010002 	.word	0x00010002

08002f80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d006      	beq.n	8002fba <I2C_MasterRequestRead+0x3a>
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d003      	beq.n	8002fba <I2C_MasterRequestRead+0x3a>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fb8:	d108      	bne.n	8002fcc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e00b      	b.n	8002fe4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	2b11      	cmp	r3, #17
 8002fd2:	d107      	bne.n	8002fe4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f893 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300a:	d103      	bne.n	8003014 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e079      	b.n	800310c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003020:	d108      	bne.n	8003034 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003022:	897b      	ldrh	r3, [r7, #10]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	611a      	str	r2, [r3, #16]
 8003032:	e05f      	b.n	80030f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003034:	897b      	ldrh	r3, [r7, #10]
 8003036:	11db      	asrs	r3, r3, #7
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f003 0306 	and.w	r3, r3, #6
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f063 030f 	orn	r3, r3, #15
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	4930      	ldr	r1, [pc, #192]	; (8003114 <I2C_MasterRequestRead+0x194>)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f8b9 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e054      	b.n	800310c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003062:	897b      	ldrh	r3, [r7, #10]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4929      	ldr	r1, [pc, #164]	; (8003118 <I2C_MasterRequestRead+0x198>)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f8a9 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e044      	b.n	800310c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f831 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00d      	beq.n	80030dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ce:	d103      	bne.n	80030d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e017      	b.n	800310c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80030dc:	897b      	ldrh	r3, [r7, #10]
 80030de:	11db      	asrs	r3, r3, #7
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 0306 	and.w	r3, r3, #6
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f063 030e 	orn	r3, r3, #14
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4907      	ldr	r1, [pc, #28]	; (8003118 <I2C_MasterRequestRead+0x198>)
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f865 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	00010008 	.word	0x00010008
 8003118:	00010002 	.word	0x00010002

0800311c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800312c:	e025      	b.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d021      	beq.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7fe fa07 	bl	8001548 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d116      	bne.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e023      	b.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10d      	bne.n	80031a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	e00c      	b.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d0b6      	beq.n	800312e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d8:	e051      	b.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d123      	bne.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003202:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f043 0204 	orr.w	r2, r3, #4
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e046      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d021      	beq.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe f985 	bl	8001548 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e020      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d10c      	bne.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	43da      	mvns	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	e00b      	b.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	43da      	mvns	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4013      	ands	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d18d      	bne.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d4:	e02d      	b.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f8ce 	bl	8003478 <I2C_IsAcknowledgeFailed>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e02d      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d021      	beq.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fe f92b 	bl	8001548 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e007      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d1ca      	bne.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003356:	e02d      	b.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f88d 	bl	8003478 <I2C_IsAcknowledgeFailed>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e02d      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d021      	beq.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003370:	f7fe f8ea 	bl	8001548 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e007      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d1ca      	bne.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033d8:	e042      	b.n	8003460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d119      	bne.n	800341c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0210 	mvn.w	r2, #16
 80033f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e029      	b.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341c:	f7fe f894 	bl	8001548 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	d302      	bcc.n	8003432 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d1b5      	bne.n	80033da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d11b      	bne.n	80034c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003498:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0cc      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034ec:	4b68      	ldr	r3, [pc, #416]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d90c      	bls.n	8003514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b65      	ldr	r3, [pc, #404]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0b8      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800352c:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a58      	ldr	r2, [pc, #352]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800354e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4b50      	ldr	r3, [pc, #320]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	494d      	ldr	r1, [pc, #308]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d044      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d119      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e07f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d003      	beq.n	8003596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003592:	2b03      	cmp	r3, #3
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003596:	4b3f      	ldr	r3, [pc, #252]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e06f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e067      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b6:	4b37      	ldr	r3, [pc, #220]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f023 0203 	bic.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4934      	ldr	r1, [pc, #208]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c8:	f7fd ffbe 	bl	8001548 <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d0:	f7fd ffba 	bl	8001548 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e04f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 020c 	and.w	r2, r3, #12
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d1eb      	bne.n	80035d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d20c      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b22      	ldr	r3, [pc, #136]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e032      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4916      	ldr	r1, [pc, #88]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	490e      	ldr	r1, [pc, #56]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800365e:	f000 f855 	bl	800370c <HAL_RCC_GetSysClockFreq>
 8003662:	4602      	mov	r2, r0
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	490a      	ldr	r1, [pc, #40]	; (8003698 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	5ccb      	ldrb	r3, [r1, r3]
 8003672:	fa22 f303 	lsr.w	r3, r2, r3
 8003676:	4a09      	ldr	r2, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd ff1e 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023c00 	.word	0x40023c00
 8003694:	40023800 	.word	0x40023800
 8003698:	08006f28 	.word	0x08006f28
 800369c:	20000000 	.word	0x20000000
 80036a0:	20000004 	.word	0x20000004

080036a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000000 	.word	0x20000000

080036bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036c0:	f7ff fff0 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0a9b      	lsrs	r3, r3, #10
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4903      	ldr	r1, [pc, #12]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	08006f38 	.word	0x08006f38

080036e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036e8:	f7ff ffdc 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 80036ec:	4602      	mov	r2, r0
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	0b5b      	lsrs	r3, r3, #13
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	4903      	ldr	r1, [pc, #12]	; (8003708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036fa:	5ccb      	ldrb	r3, [r1, r3]
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003700:	4618      	mov	r0, r3
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40023800 	.word	0x40023800
 8003708:	08006f38 	.word	0x08006f38

0800370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b0ae      	sub	sp, #184	; 0xb8
 8003712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003732:	4bcb      	ldr	r3, [pc, #812]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b0c      	cmp	r3, #12
 800373c:	f200 8206 	bhi.w	8003b4c <HAL_RCC_GetSysClockFreq+0x440>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	0800377d 	.word	0x0800377d
 800374c:	08003b4d 	.word	0x08003b4d
 8003750:	08003b4d 	.word	0x08003b4d
 8003754:	08003b4d 	.word	0x08003b4d
 8003758:	08003785 	.word	0x08003785
 800375c:	08003b4d 	.word	0x08003b4d
 8003760:	08003b4d 	.word	0x08003b4d
 8003764:	08003b4d 	.word	0x08003b4d
 8003768:	0800378d 	.word	0x0800378d
 800376c:	08003b4d 	.word	0x08003b4d
 8003770:	08003b4d 	.word	0x08003b4d
 8003774:	08003b4d 	.word	0x08003b4d
 8003778:	0800397d 	.word	0x0800397d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800377c:	4bb9      	ldr	r3, [pc, #740]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x358>)
 800377e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003782:	e1e7      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003784:	4bb8      	ldr	r3, [pc, #736]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800378a:	e1e3      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800378c:	4bb4      	ldr	r3, [pc, #720]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003798:	4bb1      	ldr	r3, [pc, #708]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d071      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a4:	4bae      	ldr	r3, [pc, #696]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x354>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80037b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	f04f 0000 	mov.w	r0, #0
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	0159      	lsls	r1, r3, #5
 80037d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037dc:	0150      	lsls	r0, r2, #5
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4621      	mov	r1, r4
 80037e4:	1a51      	subs	r1, r2, r1
 80037e6:	6439      	str	r1, [r7, #64]	; 0x40
 80037e8:	4629      	mov	r1, r5
 80037ea:	eb63 0301 	sbc.w	r3, r3, r1
 80037ee:	647b      	str	r3, [r7, #68]	; 0x44
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80037fc:	4649      	mov	r1, r9
 80037fe:	018b      	lsls	r3, r1, #6
 8003800:	4641      	mov	r1, r8
 8003802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003806:	4641      	mov	r1, r8
 8003808:	018a      	lsls	r2, r1, #6
 800380a:	4641      	mov	r1, r8
 800380c:	1a51      	subs	r1, r2, r1
 800380e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003810:	4649      	mov	r1, r9
 8003812:	eb63 0301 	sbc.w	r3, r3, r1
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003824:	4649      	mov	r1, r9
 8003826:	00cb      	lsls	r3, r1, #3
 8003828:	4641      	mov	r1, r8
 800382a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382e:	4641      	mov	r1, r8
 8003830:	00ca      	lsls	r2, r1, #3
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	4603      	mov	r3, r0
 8003838:	4622      	mov	r2, r4
 800383a:	189b      	adds	r3, r3, r2
 800383c:	633b      	str	r3, [r7, #48]	; 0x30
 800383e:	462b      	mov	r3, r5
 8003840:	460a      	mov	r2, r1
 8003842:	eb42 0303 	adc.w	r3, r2, r3
 8003846:	637b      	str	r3, [r7, #52]	; 0x34
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003854:	4629      	mov	r1, r5
 8003856:	024b      	lsls	r3, r1, #9
 8003858:	4621      	mov	r1, r4
 800385a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800385e:	4621      	mov	r1, r4
 8003860:	024a      	lsls	r2, r1, #9
 8003862:	4610      	mov	r0, r2
 8003864:	4619      	mov	r1, r3
 8003866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800386a:	2200      	movs	r2, #0
 800386c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003870:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003874:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003878:	f7fc fd1a 	bl	80002b0 <__aeabi_uldivmod>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4613      	mov	r3, r2
 8003882:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003886:	e067      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003888:	4b75      	ldr	r3, [pc, #468]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	099b      	lsrs	r3, r3, #6
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003894:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800389c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80038a2:	2300      	movs	r3, #0
 80038a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80038aa:	4622      	mov	r2, r4
 80038ac:	462b      	mov	r3, r5
 80038ae:	f04f 0000 	mov.w	r0, #0
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	0159      	lsls	r1, r3, #5
 80038b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038bc:	0150      	lsls	r0, r2, #5
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4621      	mov	r1, r4
 80038c4:	1a51      	subs	r1, r2, r1
 80038c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80038c8:	4629      	mov	r1, r5
 80038ca:	eb63 0301 	sbc.w	r3, r3, r1
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80038dc:	4649      	mov	r1, r9
 80038de:	018b      	lsls	r3, r1, #6
 80038e0:	4641      	mov	r1, r8
 80038e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038e6:	4641      	mov	r1, r8
 80038e8:	018a      	lsls	r2, r1, #6
 80038ea:	4641      	mov	r1, r8
 80038ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80038f0:	4649      	mov	r1, r9
 80038f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003902:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003906:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800390a:	4692      	mov	sl, r2
 800390c:	469b      	mov	fp, r3
 800390e:	4623      	mov	r3, r4
 8003910:	eb1a 0303 	adds.w	r3, sl, r3
 8003914:	623b      	str	r3, [r7, #32]
 8003916:	462b      	mov	r3, r5
 8003918:	eb4b 0303 	adc.w	r3, fp, r3
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800392a:	4629      	mov	r1, r5
 800392c:	028b      	lsls	r3, r1, #10
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003934:	4621      	mov	r1, r4
 8003936:	028a      	lsls	r2, r1, #10
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003940:	2200      	movs	r2, #0
 8003942:	673b      	str	r3, [r7, #112]	; 0x70
 8003944:	677a      	str	r2, [r7, #116]	; 0x74
 8003946:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800394a:	f7fc fcb1 	bl	80002b0 <__aeabi_uldivmod>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4613      	mov	r3, r2
 8003954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003958:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	3301      	adds	r3, #1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800396a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800396e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800397a:	e0eb      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800397c:	4b38      	ldr	r3, [pc, #224]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003988:	4b35      	ldr	r3, [pc, #212]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d06b      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003994:	4b32      	ldr	r3, [pc, #200]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	2200      	movs	r2, #0
 800399c:	66bb      	str	r3, [r7, #104]	; 0x68
 800399e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a6:	663b      	str	r3, [r7, #96]	; 0x60
 80039a8:	2300      	movs	r3, #0
 80039aa:	667b      	str	r3, [r7, #100]	; 0x64
 80039ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80039b0:	4622      	mov	r2, r4
 80039b2:	462b      	mov	r3, r5
 80039b4:	f04f 0000 	mov.w	r0, #0
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	0159      	lsls	r1, r3, #5
 80039be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039c2:	0150      	lsls	r0, r2, #5
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4621      	mov	r1, r4
 80039ca:	1a51      	subs	r1, r2, r1
 80039cc:	61b9      	str	r1, [r7, #24]
 80039ce:	4629      	mov	r1, r5
 80039d0:	eb63 0301 	sbc.w	r3, r3, r1
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039e2:	4659      	mov	r1, fp
 80039e4:	018b      	lsls	r3, r1, #6
 80039e6:	4651      	mov	r1, sl
 80039e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ec:	4651      	mov	r1, sl
 80039ee:	018a      	lsls	r2, r1, #6
 80039f0:	4651      	mov	r1, sl
 80039f2:	ebb2 0801 	subs.w	r8, r2, r1
 80039f6:	4659      	mov	r1, fp
 80039f8:	eb63 0901 	sbc.w	r9, r3, r1
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a10:	4690      	mov	r8, r2
 8003a12:	4699      	mov	r9, r3
 8003a14:	4623      	mov	r3, r4
 8003a16:	eb18 0303 	adds.w	r3, r8, r3
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	eb49 0303 	adc.w	r3, r9, r3
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a30:	4629      	mov	r1, r5
 8003a32:	024b      	lsls	r3, r1, #9
 8003a34:	4621      	mov	r1, r4
 8003a36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	024a      	lsls	r2, r1, #9
 8003a3e:	4610      	mov	r0, r2
 8003a40:	4619      	mov	r1, r3
 8003a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a46:	2200      	movs	r2, #0
 8003a48:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a50:	f7fc fc2e 	bl	80002b0 <__aeabi_uldivmod>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4613      	mov	r3, r2
 8003a5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a5e:	e065      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x420>
 8003a60:	40023800 	.word	0x40023800
 8003a64:	00f42400 	.word	0x00f42400
 8003a68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6c:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	2200      	movs	r2, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	4611      	mov	r1, r2
 8003a78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003a7e:	2300      	movs	r3, #0
 8003a80:	657b      	str	r3, [r7, #84]	; 0x54
 8003a82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003a86:	4642      	mov	r2, r8
 8003a88:	464b      	mov	r3, r9
 8003a8a:	f04f 0000 	mov.w	r0, #0
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	0159      	lsls	r1, r3, #5
 8003a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a98:	0150      	lsls	r0, r2, #5
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	1a51      	subs	r1, r2, r1
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ab8:	4659      	mov	r1, fp
 8003aba:	018b      	lsls	r3, r1, #6
 8003abc:	4651      	mov	r1, sl
 8003abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ac2:	4651      	mov	r1, sl
 8003ac4:	018a      	lsls	r2, r1, #6
 8003ac6:	4651      	mov	r1, sl
 8003ac8:	1a54      	subs	r4, r2, r1
 8003aca:	4659      	mov	r1, fp
 8003acc:	eb63 0501 	sbc.w	r5, r3, r1
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	00eb      	lsls	r3, r5, #3
 8003ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ade:	00e2      	lsls	r2, r4, #3
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	4643      	mov	r3, r8
 8003ae6:	18e3      	adds	r3, r4, r3
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	464b      	mov	r3, r9
 8003aec:	eb45 0303 	adc.w	r3, r5, r3
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003afe:	4629      	mov	r1, r5
 8003b00:	028b      	lsls	r3, r1, #10
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b08:	4621      	mov	r1, r4
 8003b0a:	028a      	lsls	r2, r1, #10
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b14:	2200      	movs	r2, #0
 8003b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003b1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b1e:	f7fc fbc7 	bl	80002b0 <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4613      	mov	r3, r2
 8003b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	0f1b      	lsrs	r3, r3, #28
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b4a:	e003      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	37b8      	adds	r7, #184	; 0xb8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400

08003b6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e28d      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8083 	beq.w	8003c92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b8c:	4b94      	ldr	r3, [pc, #592]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d019      	beq.n	8003bcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b98:	4b91      	ldr	r3, [pc, #580]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ba4:	4b8e      	ldr	r3, [pc, #568]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb0:	d00c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb2:	4b8b      	ldr	r3, [pc, #556]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d112      	bne.n	8003be4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4b88      	ldr	r3, [pc, #544]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bca:	d10b      	bne.n	8003be4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	4b84      	ldr	r3, [pc, #528]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d05b      	beq.n	8003c90 <HAL_RCC_OscConfig+0x124>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d157      	bne.n	8003c90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e25a      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bec:	d106      	bne.n	8003bfc <HAL_RCC_OscConfig+0x90>
 8003bee:	4b7c      	ldr	r3, [pc, #496]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a7b      	ldr	r2, [pc, #492]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e01d      	b.n	8003c38 <HAL_RCC_OscConfig+0xcc>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0xb4>
 8003c06:	4b76      	ldr	r3, [pc, #472]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a75      	ldr	r2, [pc, #468]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b73      	ldr	r3, [pc, #460]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a72      	ldr	r2, [pc, #456]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0xcc>
 8003c20:	4b6f      	ldr	r3, [pc, #444]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6e      	ldr	r2, [pc, #440]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b6c      	ldr	r3, [pc, #432]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a6b      	ldr	r2, [pc, #428]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd fc82 	bl	8001548 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fd fc7e 	bl	8001548 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e21f      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	4b61      	ldr	r3, [pc, #388]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0xdc>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd fc6e 	bl	8001548 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fd fc6a 	bl	8001548 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e20b      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	4b57      	ldr	r3, [pc, #348]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x104>
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d06f      	beq.n	8003d7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c9e:	4b50      	ldr	r3, [pc, #320]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d017      	beq.n	8003cda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003caa:	4b4d      	ldr	r3, [pc, #308]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d105      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cb6:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b47      	ldr	r3, [pc, #284]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cca:	2b0c      	cmp	r3, #12
 8003ccc:	d11c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cce:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d116      	bne.n	8003d08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	4b41      	ldr	r3, [pc, #260]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x186>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e1d3      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf2:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4937      	ldr	r1, [pc, #220]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d06:	e03a      	b.n	8003d7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d020      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d10:	4b34      	ldr	r3, [pc, #208]	; (8003de4 <HAL_RCC_OscConfig+0x278>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fd fc17 	bl	8001548 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1e:	f7fd fc13 	bl	8001548 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e1b4      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d30:	4b2b      	ldr	r3, [pc, #172]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3c:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4925      	ldr	r1, [pc, #148]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	600b      	str	r3, [r1, #0]
 8003d50:	e015      	b.n	8003d7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d52:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <HAL_RCC_OscConfig+0x278>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fd fbf6 	bl	8001548 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d60:	f7fd fbf2 	bl	8001548 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e193      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d036      	beq.n	8003df8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <HAL_RCC_OscConfig+0x27c>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fd fbd6 	bl	8001548 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da0:	f7fd fbd2 	bl	8001548 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e173      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db2:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x234>
 8003dbe:	e01b      	b.n	8003df8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_RCC_OscConfig+0x27c>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fd fbbf 	bl	8001548 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dcc:	e00e      	b.n	8003dec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dce:	f7fd fbbb 	bl	8001548 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d907      	bls.n	8003dec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e15c      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
 8003de0:	40023800 	.word	0x40023800
 8003de4:	42470000 	.word	0x42470000
 8003de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dec:	4b8a      	ldr	r3, [pc, #552]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ea      	bne.n	8003dce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8097 	beq.w	8003f34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e06:	2300      	movs	r3, #0
 8003e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0a:	4b83      	ldr	r3, [pc, #524]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	4b7f      	ldr	r3, [pc, #508]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	4a7e      	ldr	r2, [pc, #504]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6413      	str	r3, [r2, #64]	; 0x40
 8003e26:	4b7c      	ldr	r3, [pc, #496]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e32:	2301      	movs	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e36:	4b79      	ldr	r3, [pc, #484]	; (800401c <HAL_RCC_OscConfig+0x4b0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d118      	bne.n	8003e74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCC_OscConfig+0x4b0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a75      	ldr	r2, [pc, #468]	; (800401c <HAL_RCC_OscConfig+0x4b0>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4e:	f7fd fb7b 	bl	8001548 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e56:	f7fd fb77 	bl	8001548 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e118      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	4b6c      	ldr	r3, [pc, #432]	; (800401c <HAL_RCC_OscConfig+0x4b0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d106      	bne.n	8003e8a <HAL_RCC_OscConfig+0x31e>
 8003e7c:	4b66      	ldr	r3, [pc, #408]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	4a65      	ldr	r2, [pc, #404]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	e01c      	b.n	8003ec4 <HAL_RCC_OscConfig+0x358>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b05      	cmp	r3, #5
 8003e90:	d10c      	bne.n	8003eac <HAL_RCC_OscConfig+0x340>
 8003e92:	4b61      	ldr	r3, [pc, #388]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a60      	ldr	r2, [pc, #384]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003e98:	f043 0304 	orr.w	r3, r3, #4
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	4a5d      	ldr	r2, [pc, #372]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCC_OscConfig+0x358>
 8003eac:	4b5a      	ldr	r3, [pc, #360]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a59      	ldr	r2, [pc, #356]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb8:	4b57      	ldr	r3, [pc, #348]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4a56      	ldr	r2, [pc, #344]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003ebe:	f023 0304 	bic.w	r3, r3, #4
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d015      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fd fb3c 	bl	8001548 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7fd fb38 	bl	8001548 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e0d7      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eea:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0ee      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x368>
 8003ef6:	e014      	b.n	8003f22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fd fb26 	bl	8001548 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f00:	f7fd fb22 	bl	8001548 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e0c1      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f16:	4b40      	ldr	r3, [pc, #256]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1ee      	bne.n	8003f00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f28:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	4a3a      	ldr	r2, [pc, #232]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80ad 	beq.w	8004098 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d060      	beq.n	800400c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d145      	bne.n	8003fde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f52:	4b33      	ldr	r3, [pc, #204]	; (8004020 <HAL_RCC_OscConfig+0x4b4>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd faf6 	bl	8001548 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f60:	f7fd faf2 	bl	8001548 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e093      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	4b29      	ldr	r3, [pc, #164]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69da      	ldr	r2, [r3, #28]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	019b      	lsls	r3, r3, #6
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	3b01      	subs	r3, #1
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	491b      	ldr	r1, [pc, #108]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_RCC_OscConfig+0x4b4>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb6:	f7fd fac7 	bl	8001548 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbe:	f7fd fac3 	bl	8001548 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e064      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd0:	4b11      	ldr	r3, [pc, #68]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x452>
 8003fdc:	e05c      	b.n	8004098 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_RCC_OscConfig+0x4b4>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fd fab0 	bl	8001548 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fd faac 	bl	8001548 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e04d      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_OscConfig+0x4ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x480>
 800400a:	e045      	b.n	8004098 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d107      	bne.n	8004024 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e040      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
 8004018:	40023800 	.word	0x40023800
 800401c:	40007000 	.word	0x40007000
 8004020:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004024:	4b1f      	ldr	r3, [pc, #124]	; (80040a4 <HAL_RCC_OscConfig+0x538>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d030      	beq.n	8004094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d129      	bne.n	8004094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d122      	bne.n	8004094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004054:	4013      	ands	r3, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800405a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800405c:	4293      	cmp	r3, r2
 800405e:	d119      	bne.n	8004094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	3b01      	subs	r3, #1
 800406e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d10f      	bne.n	8004094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004080:	429a      	cmp	r2, r3
 8004082:	d107      	bne.n	8004094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800

080040a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e041      	b.n	800413e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc ff8e 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 f95e 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b02      	cmp	r3, #2
 800415a:	d122      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d11b      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f06f 0202 	mvn.w	r2, #2
 8004172:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f8ee 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 800418e:	e005      	b.n	800419c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f8e0 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8f1 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d122      	bne.n	80041f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d11b      	bne.n	80041f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f06f 0204 	mvn.w	r2, #4
 80041c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8c4 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 80041e2:	e005      	b.n	80041f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f8b6 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f8c7 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b08      	cmp	r3, #8
 8004202:	d122      	bne.n	800424a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b08      	cmp	r3, #8
 8004210:	d11b      	bne.n	800424a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f06f 0208 	mvn.w	r2, #8
 800421a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2204      	movs	r2, #4
 8004220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f89a 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 8004236:	e005      	b.n	8004244 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f88c 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f89d 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b10      	cmp	r3, #16
 8004256:	d122      	bne.n	800429e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b10      	cmp	r3, #16
 8004264:	d11b      	bne.n	800429e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f06f 0210 	mvn.w	r2, #16
 800426e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2208      	movs	r2, #8
 8004274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f870 	bl	800436a <HAL_TIM_IC_CaptureCallback>
 800428a:	e005      	b.n	8004298 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f862 	bl	8004356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f873 	bl	800437e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d10e      	bne.n	80042ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d107      	bne.n	80042ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f06f 0201 	mvn.w	r2, #1
 80042c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7fc fdcb 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d4:	2b80      	cmp	r3, #128	; 0x80
 80042d6:	d10e      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	d107      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f97f 	bl	80045f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d10e      	bne.n	8004322 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b40      	cmp	r3, #64	; 0x40
 8004310:	d107      	bne.n	8004322 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800431a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f838 	bl	8004392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b20      	cmp	r3, #32
 800432e:	d10e      	bne.n	800434e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b20      	cmp	r3, #32
 800433c:	d107      	bne.n	800434e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f06f 0220 	mvn.w	r2, #32
 8004346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f949 	bl	80045e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a40      	ldr	r2, [pc, #256]	; (80044bc <TIM_Base_SetConfig+0x114>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d00f      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a3d      	ldr	r2, [pc, #244]	; (80044c0 <TIM_Base_SetConfig+0x118>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00b      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a3c      	ldr	r2, [pc, #240]	; (80044c4 <TIM_Base_SetConfig+0x11c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d007      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a3b      	ldr	r2, [pc, #236]	; (80044c8 <TIM_Base_SetConfig+0x120>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d003      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a3a      	ldr	r2, [pc, #232]	; (80044cc <TIM_Base_SetConfig+0x124>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d108      	bne.n	80043fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a2f      	ldr	r2, [pc, #188]	; (80044bc <TIM_Base_SetConfig+0x114>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d02b      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004408:	d027      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a2c      	ldr	r2, [pc, #176]	; (80044c0 <TIM_Base_SetConfig+0x118>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d023      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a2b      	ldr	r2, [pc, #172]	; (80044c4 <TIM_Base_SetConfig+0x11c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01f      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a2a      	ldr	r2, [pc, #168]	; (80044c8 <TIM_Base_SetConfig+0x120>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01b      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a29      	ldr	r2, [pc, #164]	; (80044cc <TIM_Base_SetConfig+0x124>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d017      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a28      	ldr	r2, [pc, #160]	; (80044d0 <TIM_Base_SetConfig+0x128>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a27      	ldr	r2, [pc, #156]	; (80044d4 <TIM_Base_SetConfig+0x12c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00f      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a26      	ldr	r2, [pc, #152]	; (80044d8 <TIM_Base_SetConfig+0x130>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00b      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a25      	ldr	r2, [pc, #148]	; (80044dc <TIM_Base_SetConfig+0x134>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a24      	ldr	r2, [pc, #144]	; (80044e0 <TIM_Base_SetConfig+0x138>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a23      	ldr	r2, [pc, #140]	; (80044e4 <TIM_Base_SetConfig+0x13c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d108      	bne.n	800446c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <TIM_Base_SetConfig+0x114>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_Base_SetConfig+0xf8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <TIM_Base_SetConfig+0x124>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d103      	bne.n	80044a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	615a      	str	r2, [r3, #20]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40010000 	.word	0x40010000
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800
 80044c8:	40000c00 	.word	0x40000c00
 80044cc:	40010400 	.word	0x40010400
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400
 80044d8:	40014800 	.word	0x40014800
 80044dc:	40001800 	.word	0x40001800
 80044e0:	40001c00 	.word	0x40001c00
 80044e4:	40002000 	.word	0x40002000

080044e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e05a      	b.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d01d      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d10c      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	4313      	orrs	r3, r2
 800459a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40001800 	.word	0x40001800

080045e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e03f      	b.n	800469a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fd06 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 ffff 	bl	8005650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b08a      	sub	sp, #40	; 0x28
 80046a6:	af02      	add	r7, sp, #8
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	4613      	mov	r3, r2
 80046b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d17c      	bne.n	80047bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_UART_Transmit+0x2c>
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e075      	b.n	80047be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_UART_Transmit+0x3e>
 80046dc:	2302      	movs	r3, #2
 80046de:	e06e      	b.n	80047be <HAL_UART_Transmit+0x11c>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2221      	movs	r2, #33	; 0x21
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046f6:	f7fc ff27 	bl	8001548 <HAL_GetTick>
 80046fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	88fa      	ldrh	r2, [r7, #6]
 8004706:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004710:	d108      	bne.n	8004724 <HAL_UART_Transmit+0x82>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d104      	bne.n	8004724 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	e003      	b.n	800472c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004734:	e02a      	b.n	800478c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fc79 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e036      	b.n	80047be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	3302      	adds	r3, #2
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e007      	b.n	800477e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	3301      	adds	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1cf      	bne.n	8004736 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	2140      	movs	r1, #64	; 0x40
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fc49 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e006      	b.n	80047be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e000      	b.n	80047be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
  }
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	4613      	mov	r3, r2
 80047d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d11d      	bne.n	800481c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_UART_Receive_IT+0x26>
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e016      	b.n	800481e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_UART_Receive_IT+0x38>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e00f      	b.n	800481e <HAL_UART_Receive_IT+0x58>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	461a      	mov	r2, r3
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fc7e 	bl	8005114 <UART_Start_Receive_IT>
 8004818:	4603      	mov	r3, r0
 800481a:	e000      	b.n	800481e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800481c:	2302      	movs	r3, #2
  }
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b08c      	sub	sp, #48	; 0x30
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	4613      	mov	r3, r2
 8004832:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b20      	cmp	r3, #32
 800483e:	d152      	bne.n	80048e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e04b      	b.n	80048e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800485a:	2302      	movs	r3, #2
 800485c:	e044      	b.n	80048e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	461a      	mov	r2, r3
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fc8c 	bl	8005190 <UART_Start_Receive_DMA>
 8004878:	4603      	mov	r3, r0
 800487a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800487e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004882:	2b00      	cmp	r3, #0
 8004884:	d12c      	bne.n	80048e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	2b01      	cmp	r3, #1
 800488c:	d125      	bne.n	80048da <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	617b      	str	r3, [r7, #20]
   return(result);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f043 0310 	orr.w	r3, r3, #16
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	330c      	adds	r3, #12
 80048c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048c4:	627a      	str	r2, [r7, #36]	; 0x24
 80048c6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6a39      	ldr	r1, [r7, #32]
 80048ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e5      	bne.n	80048a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80048d8:	e002      	b.n	80048e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80048e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048e4:	e000      	b.n	80048e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3730      	adds	r7, #48	; 0x30
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b0ba      	sub	sp, #232	; 0xe8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004916:	2300      	movs	r3, #0
 8004918:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800491c:	2300      	movs	r3, #0
 800491e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800492e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10f      	bne.n	8004956 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <HAL_UART_IRQHandler+0x66>
 8004942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fdc3 	bl	80054da <UART_Receive_IT>
      return;
 8004954:	e256      	b.n	8004e04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80de 	beq.w	8004b1c <HAL_UART_IRQHandler+0x22c>
 8004960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800496c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004970:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80d1 	beq.w	8004b1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800497a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_UART_IRQHandler+0xae>
 8004986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f043 0201 	orr.w	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800499e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00b      	beq.n	80049c2 <HAL_UART_IRQHandler+0xd2>
 80049aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f043 0202 	orr.w	r2, r3, #2
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <HAL_UART_IRQHandler+0xf6>
 80049ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0204 	orr.w	r2, r3, #4
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d011      	beq.n	8004a16 <HAL_UART_IRQHandler+0x126>
 80049f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d105      	bne.n	8004a0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f043 0208 	orr.w	r2, r3, #8
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 81ed 	beq.w	8004dfa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d008      	beq.n	8004a3e <HAL_UART_IRQHandler+0x14e>
 8004a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fd4e 	bl	80054da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d103      	bne.n	8004a6a <HAL_UART_IRQHandler+0x17a>
 8004a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d04f      	beq.n	8004b0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fc56 	bl	800531c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	d141      	bne.n	8004b02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3314      	adds	r3, #20
 8004a84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3314      	adds	r3, #20
 8004aa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ab6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004aba:	e841 2300 	strex	r3, r2, [r1]
 8004abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1d9      	bne.n	8004a7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d013      	beq.n	8004afa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	4a7d      	ldr	r2, [pc, #500]	; (8004ccc <HAL_UART_IRQHandler+0x3dc>)
 8004ad8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fd f92a 	bl	8001d38 <HAL_DMA_Abort_IT>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d016      	beq.n	8004b18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004af4:	4610      	mov	r0, r2
 8004af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af8:	e00e      	b.n	8004b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f99a 	bl	8004e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	e00a      	b.n	8004b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f996 	bl	8004e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	e006      	b.n	8004b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f992 	bl	8004e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b16:	e170      	b.n	8004dfa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b18:	bf00      	nop
    return;
 8004b1a:	e16e      	b.n	8004dfa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	f040 814a 	bne.w	8004dba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 8143 	beq.w	8004dba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 813c 	beq.w	8004dba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b42:	2300      	movs	r3, #0
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	f040 80b4 	bne.w	8004cd0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8140 	beq.w	8004dfe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b86:	429a      	cmp	r2, r3
 8004b88:	f080 8139 	bcs.w	8004dfe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9e:	f000 8088 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1d9      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3314      	adds	r3, #20
 8004bf4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3314      	adds	r3, #20
 8004c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e1      	bne.n	8004bee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3314      	adds	r3, #20
 8004c30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3314      	adds	r3, #20
 8004c4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e3      	bne.n	8004c2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c82:	f023 0310 	bic.w	r3, r3, #16
 8004c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c94:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e3      	bne.n	8004c70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fc ffd3 	bl	8001c58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fb fdea 	bl	800089c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cc8:	e099      	b.n	8004dfe <HAL_UART_IRQHandler+0x50e>
 8004cca:	bf00      	nop
 8004ccc:	080053e3 	.word	0x080053e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 808b 	beq.w	8004e02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8086 	beq.w	8004e02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d1a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e3      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3314      	adds	r3, #20
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d52:	633a      	str	r2, [r7, #48]	; 0x30
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e3      	bne.n	8004d2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0310 	bic.w	r3, r3, #16
 8004d8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	330c      	adds	r3, #12
 8004d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d98:	61fa      	str	r2, [r7, #28]
 8004d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	69b9      	ldr	r1, [r7, #24]
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	e841 2300 	strex	r3, r2, [r1]
 8004da4:	617b      	str	r3, [r7, #20]
   return(result);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e3      	bne.n	8004d74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fb fd72 	bl	800089c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004db8:	e023      	b.n	8004e02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <HAL_UART_IRQHandler+0x4ea>
 8004dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fb19 	bl	800540a <UART_Transmit_IT>
    return;
 8004dd8:	e014      	b.n	8004e04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00e      	beq.n	8004e04 <HAL_UART_IRQHandler+0x514>
 8004de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fb59 	bl	80054aa <UART_EndTransmit_IT>
    return;
 8004df8:	e004      	b.n	8004e04 <HAL_UART_IRQHandler+0x514>
    return;
 8004dfa:	bf00      	nop
 8004dfc:	e002      	b.n	8004e04 <HAL_UART_IRQHandler+0x514>
      return;
 8004dfe:	bf00      	nop
 8004e00:	e000      	b.n	8004e04 <HAL_UART_IRQHandler+0x514>
      return;
 8004e02:	bf00      	nop
  }
}
 8004e04:	37e8      	adds	r7, #232	; 0xe8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop

08004e0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b09c      	sub	sp, #112	; 0x70
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d172      	bne.n	8004f4a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e66:	2200      	movs	r2, #0
 8004e68:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e80:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e8c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e5      	bne.n	8004e6a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8004eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ebe:	647a      	str	r2, [r7, #68]	; 0x44
 8004ec0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e5      	bne.n	8004e9e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3314      	adds	r3, #20
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8004eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3314      	adds	r3, #20
 8004ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ef2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e5      	bne.n	8004ed2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d119      	bne.n	8004f4a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f023 0310 	bic.w	r3, r3, #16
 8004f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f36:	61fa      	str	r2, [r7, #28]
 8004f38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3a:	69b9      	ldr	r1, [r7, #24]
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	617b      	str	r3, [r7, #20]
   return(result);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e5      	bne.n	8004f16 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d106      	bne.n	8004f60 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f56:	4619      	mov	r1, r3
 8004f58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f5a:	f7fb fc9f 	bl	800089c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f5e:	e002      	b.n	8004f66 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004f60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f62:	f7fb ff67 	bl	8000e34 <HAL_UART_RxCpltCallback>
}
 8004f66:	bf00      	nop
 8004f68:	3770      	adds	r7, #112	; 0x70
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d108      	bne.n	8004f96 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7fb fc84 	bl	800089c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f94:	e002      	b.n	8004f9c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f7ff ff42 	bl	8004e20 <HAL_UART_RxHalfCpltCallback>
}
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b21      	cmp	r3, #33	; 0x21
 8004fd6:	d108      	bne.n	8004fea <UART_DMAError+0x46>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004fe4:	68b8      	ldr	r0, [r7, #8]
 8004fe6:	f000 f971 	bl	80052cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	bf0c      	ite	eq
 8004ff8:	2301      	moveq	r3, #1
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b22      	cmp	r3, #34	; 0x22
 800500a:	d108      	bne.n	800501e <UART_DMAError+0x7a>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2200      	movs	r2, #0
 8005016:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005018:	68b8      	ldr	r0, [r7, #8]
 800501a:	f000 f97f 	bl	800531c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f043 0210 	orr.w	r2, r3, #16
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800502a:	68b8      	ldr	r0, [r7, #8]
 800502c:	f7ff ff02 	bl	8004e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005030:	bf00      	nop
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b090      	sub	sp, #64	; 0x40
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005048:	e050      	b.n	80050ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d04c      	beq.n	80050ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <UART_WaitOnFlagUntilTimeout+0x30>
 8005058:	f7fc fa76 	bl	8001548 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005064:	429a      	cmp	r2, r3
 8005066:	d241      	bcs.n	80050ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	330c      	adds	r3, #12
 8005086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005088:	637a      	str	r2, [r7, #52]	; 0x34
 800508a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800508e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e5      	bne.n	8005068 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3314      	adds	r3, #20
 80050a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	613b      	str	r3, [r7, #16]
   return(result);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3314      	adds	r3, #20
 80050ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050bc:	623a      	str	r2, [r7, #32]
 80050be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	69f9      	ldr	r1, [r7, #28]
 80050c2:	6a3a      	ldr	r2, [r7, #32]
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e5      	bne.n	800509c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e00f      	b.n	800510c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4013      	ands	r3, r2
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	bf0c      	ite	eq
 80050fc:	2301      	moveq	r3, #1
 80050fe:	2300      	movne	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	429a      	cmp	r2, r3
 8005108:	d09f      	beq.n	800504a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3740      	adds	r7, #64	; 0x40
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	88fa      	ldrh	r2, [r7, #6]
 8005132:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2222      	movs	r2, #34	; 0x22
 800513e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005160:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0220 	orr.w	r2, r2, #32
 8005180:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b098      	sub	sp, #96	; 0x60
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	88fa      	ldrh	r2, [r7, #6]
 80051a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2222      	movs	r2, #34	; 0x22
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	4a40      	ldr	r2, [pc, #256]	; (80052c0 <UART_Start_Receive_DMA+0x130>)
 80051be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	4a3f      	ldr	r2, [pc, #252]	; (80052c4 <UART_Start_Receive_DMA+0x134>)
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	4a3e      	ldr	r2, [pc, #248]	; (80052c8 <UART_Start_Receive_DMA+0x138>)
 80051ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	2200      	movs	r2, #0
 80051d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80051d8:	f107 0308 	add.w	r3, r7, #8
 80051dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	f7fc fcda 	bl	8001ba8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d019      	beq.n	800524e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005230:	65bb      	str	r3, [r7, #88]	; 0x58
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800523a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800523c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e5      	bne.n	800521a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	657b      	str	r3, [r7, #84]	; 0x54
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3314      	adds	r3, #20
 800526c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800526e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005270:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e5      	bne.n	800524e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3314      	adds	r3, #20
 8005288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	617b      	str	r3, [r7, #20]
   return(result);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005298:	653b      	str	r3, [r7, #80]	; 0x50
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3314      	adds	r3, #20
 80052a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052a2:	627a      	str	r2, [r7, #36]	; 0x24
 80052a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6a39      	ldr	r1, [r7, #32]
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e5      	bne.n	8005282 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3760      	adds	r7, #96	; 0x60
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	08004e49 	.word	0x08004e49
 80052c4:	08004f6f 	.word	0x08004f6f
 80052c8:	08004fa5 	.word	0x08004fa5

080052cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b089      	sub	sp, #36	; 0x24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	61ba      	str	r2, [r7, #24]
 80052f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6979      	ldr	r1, [r7, #20]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	613b      	str	r3, [r7, #16]
   return(result);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e5      	bne.n	80052d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005310:	bf00      	nop
 8005312:	3724      	adds	r7, #36	; 0x24
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b095      	sub	sp, #84	; 0x54
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	330c      	adds	r3, #12
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800533a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	330c      	adds	r3, #12
 8005342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005344:	643a      	str	r2, [r7, #64]	; 0x40
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800534a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e5      	bne.n	8005324 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3314      	adds	r3, #20
 800535e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	61fb      	str	r3, [r7, #28]
   return(result);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f023 0301 	bic.w	r3, r3, #1
 800536e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3314      	adds	r3, #20
 8005376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800537e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e5      	bne.n	8005358 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	2b01      	cmp	r3, #1
 8005392:	d119      	bne.n	80053c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f023 0310 	bic.w	r3, r3, #16
 80053aa:	647b      	str	r3, [r7, #68]	; 0x44
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b4:	61ba      	str	r2, [r7, #24]
 80053b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6979      	ldr	r1, [r7, #20]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	613b      	str	r3, [r7, #16]
   return(result);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e5      	bne.n	8005394 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053d6:	bf00      	nop
 80053d8:	3754      	adds	r7, #84	; 0x54
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff fd19 	bl	8004e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005402:	bf00      	nop
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b21      	cmp	r3, #33	; 0x21
 800541c:	d13e      	bne.n	800549c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005426:	d114      	bne.n	8005452 <UART_Transmit_IT+0x48>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d110      	bne.n	8005452 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005444:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	1c9a      	adds	r2, r3, #2
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	621a      	str	r2, [r3, #32]
 8005450:	e008      	b.n	8005464 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	1c59      	adds	r1, r3, #1
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6211      	str	r1, [r2, #32]
 800545c:	781a      	ldrb	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29b      	uxth	r3, r3
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	4619      	mov	r1, r3
 8005472:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10f      	bne.n	8005498 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005486:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005496:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	e000      	b.n	800549e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800549c:	2302      	movs	r3, #2
  }
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fc9e 	bl	8004e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08c      	sub	sp, #48	; 0x30
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b22      	cmp	r3, #34	; 0x22
 80054ec:	f040 80ab 	bne.w	8005646 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f8:	d117      	bne.n	800552a <UART_Receive_IT+0x50>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d113      	bne.n	800552a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005518:	b29a      	uxth	r2, r3
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	1c9a      	adds	r2, r3, #2
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
 8005528:	e026      	b.n	8005578 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005530:	2300      	movs	r3, #0
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553c:	d007      	beq.n	800554e <UART_Receive_IT+0x74>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <UART_Receive_IT+0x82>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	e008      	b.n	800556e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005568:	b2da      	uxtb	r2, r3
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29b      	uxth	r3, r3
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4619      	mov	r1, r3
 8005586:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005588:	2b00      	cmp	r3, #0
 800558a:	d15a      	bne.n	8005642 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0220 	bic.w	r2, r2, #32
 800559a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0201 	bic.w	r2, r2, #1
 80055ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d135      	bne.n	8005638 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	613b      	str	r3, [r7, #16]
   return(result);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f023 0310 	bic.w	r3, r3, #16
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f2:	623a      	str	r2, [r7, #32]
 80055f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	69f9      	ldr	r1, [r7, #28]
 80055f8:	6a3a      	ldr	r2, [r7, #32]
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e5      	bne.n	80055d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b10      	cmp	r3, #16
 8005612:	d10a      	bne.n	800562a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7fb f933 	bl	800089c <HAL_UARTEx_RxEventCallback>
 8005636:	e002      	b.n	800563e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7fb fbfb 	bl	8000e34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e002      	b.n	8005648 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	e000      	b.n	8005648 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005646:	2302      	movs	r3, #2
  }
}
 8005648:	4618      	mov	r0, r3
 800564a:	3730      	adds	r7, #48	; 0x30
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005654:	b0c0      	sub	sp, #256	; 0x100
 8005656:	af00      	add	r7, sp, #0
 8005658:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	68d9      	ldr	r1, [r3, #12]
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	ea40 0301 	orr.w	r3, r0, r1
 8005678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	431a      	orrs	r2, r3
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	431a      	orrs	r2, r3
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056a8:	f021 010c 	bic.w	r1, r1, #12
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056b6:	430b      	orrs	r3, r1
 80056b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ca:	6999      	ldr	r1, [r3, #24]
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	ea40 0301 	orr.w	r3, r0, r1
 80056d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b8f      	ldr	r3, [pc, #572]	; (800591c <UART_SetConfig+0x2cc>)
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d005      	beq.n	80056f0 <UART_SetConfig+0xa0>
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b8d      	ldr	r3, [pc, #564]	; (8005920 <UART_SetConfig+0x2d0>)
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d104      	bne.n	80056fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056f0:	f7fd fff8 	bl	80036e4 <HAL_RCC_GetPCLK2Freq>
 80056f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056f8:	e003      	b.n	8005702 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056fa:	f7fd ffdf 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 80056fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570c:	f040 810c 	bne.w	8005928 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005714:	2200      	movs	r2, #0
 8005716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800571a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800571e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005722:	4622      	mov	r2, r4
 8005724:	462b      	mov	r3, r5
 8005726:	1891      	adds	r1, r2, r2
 8005728:	65b9      	str	r1, [r7, #88]	; 0x58
 800572a:	415b      	adcs	r3, r3
 800572c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800572e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005732:	4621      	mov	r1, r4
 8005734:	eb12 0801 	adds.w	r8, r2, r1
 8005738:	4629      	mov	r1, r5
 800573a:	eb43 0901 	adc.w	r9, r3, r1
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800574a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800574e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005752:	4690      	mov	r8, r2
 8005754:	4699      	mov	r9, r3
 8005756:	4623      	mov	r3, r4
 8005758:	eb18 0303 	adds.w	r3, r8, r3
 800575c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005760:	462b      	mov	r3, r5
 8005762:	eb49 0303 	adc.w	r3, r9, r3
 8005766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005776:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800577a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800577e:	460b      	mov	r3, r1
 8005780:	18db      	adds	r3, r3, r3
 8005782:	653b      	str	r3, [r7, #80]	; 0x50
 8005784:	4613      	mov	r3, r2
 8005786:	eb42 0303 	adc.w	r3, r2, r3
 800578a:	657b      	str	r3, [r7, #84]	; 0x54
 800578c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005790:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005794:	f7fa fd8c 	bl	80002b0 <__aeabi_uldivmod>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4b61      	ldr	r3, [pc, #388]	; (8005924 <UART_SetConfig+0x2d4>)
 800579e:	fba3 2302 	umull	r2, r3, r3, r2
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	011c      	lsls	r4, r3, #4
 80057a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	1891      	adds	r1, r2, r2
 80057be:	64b9      	str	r1, [r7, #72]	; 0x48
 80057c0:	415b      	adcs	r3, r3
 80057c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057c8:	4641      	mov	r1, r8
 80057ca:	eb12 0a01 	adds.w	sl, r2, r1
 80057ce:	4649      	mov	r1, r9
 80057d0:	eb43 0b01 	adc.w	fp, r3, r1
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057e8:	4692      	mov	sl, r2
 80057ea:	469b      	mov	fp, r3
 80057ec:	4643      	mov	r3, r8
 80057ee:	eb1a 0303 	adds.w	r3, sl, r3
 80057f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057f6:	464b      	mov	r3, r9
 80057f8:	eb4b 0303 	adc.w	r3, fp, r3
 80057fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800580c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005810:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005814:	460b      	mov	r3, r1
 8005816:	18db      	adds	r3, r3, r3
 8005818:	643b      	str	r3, [r7, #64]	; 0x40
 800581a:	4613      	mov	r3, r2
 800581c:	eb42 0303 	adc.w	r3, r2, r3
 8005820:	647b      	str	r3, [r7, #68]	; 0x44
 8005822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005826:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800582a:	f7fa fd41 	bl	80002b0 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4611      	mov	r1, r2
 8005834:	4b3b      	ldr	r3, [pc, #236]	; (8005924 <UART_SetConfig+0x2d4>)
 8005836:	fba3 2301 	umull	r2, r3, r3, r1
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	2264      	movs	r2, #100	; 0x64
 800583e:	fb02 f303 	mul.w	r3, r2, r3
 8005842:	1acb      	subs	r3, r1, r3
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800584a:	4b36      	ldr	r3, [pc, #216]	; (8005924 <UART_SetConfig+0x2d4>)
 800584c:	fba3 2302 	umull	r2, r3, r3, r2
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005858:	441c      	add	r4, r3
 800585a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005864:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005868:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	1891      	adds	r1, r2, r2
 8005872:	63b9      	str	r1, [r7, #56]	; 0x38
 8005874:	415b      	adcs	r3, r3
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800587c:	4641      	mov	r1, r8
 800587e:	1851      	adds	r1, r2, r1
 8005880:	6339      	str	r1, [r7, #48]	; 0x30
 8005882:	4649      	mov	r1, r9
 8005884:	414b      	adcs	r3, r1
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005894:	4659      	mov	r1, fp
 8005896:	00cb      	lsls	r3, r1, #3
 8005898:	4651      	mov	r1, sl
 800589a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800589e:	4651      	mov	r1, sl
 80058a0:	00ca      	lsls	r2, r1, #3
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	4642      	mov	r2, r8
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058b0:	464b      	mov	r3, r9
 80058b2:	460a      	mov	r2, r1
 80058b4:	eb42 0303 	adc.w	r3, r2, r3
 80058b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058d0:	460b      	mov	r3, r1
 80058d2:	18db      	adds	r3, r3, r3
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d6:	4613      	mov	r3, r2
 80058d8:	eb42 0303 	adc.w	r3, r2, r3
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058e6:	f7fa fce3 	bl	80002b0 <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <UART_SetConfig+0x2d4>)
 80058f0:	fba3 1302 	umull	r1, r3, r3, r2
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	2164      	movs	r1, #100	; 0x64
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	3332      	adds	r3, #50	; 0x32
 8005902:	4a08      	ldr	r2, [pc, #32]	; (8005924 <UART_SetConfig+0x2d4>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	f003 0207 	and.w	r2, r3, #7
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4422      	add	r2, r4
 8005916:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005918:	e105      	b.n	8005b26 <UART_SetConfig+0x4d6>
 800591a:	bf00      	nop
 800591c:	40011000 	.word	0x40011000
 8005920:	40011400 	.word	0x40011400
 8005924:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800592c:	2200      	movs	r2, #0
 800592e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005932:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005936:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800593a:	4642      	mov	r2, r8
 800593c:	464b      	mov	r3, r9
 800593e:	1891      	adds	r1, r2, r2
 8005940:	6239      	str	r1, [r7, #32]
 8005942:	415b      	adcs	r3, r3
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
 8005946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800594a:	4641      	mov	r1, r8
 800594c:	1854      	adds	r4, r2, r1
 800594e:	4649      	mov	r1, r9
 8005950:	eb43 0501 	adc.w	r5, r3, r1
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	00eb      	lsls	r3, r5, #3
 800595e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005962:	00e2      	lsls	r2, r4, #3
 8005964:	4614      	mov	r4, r2
 8005966:	461d      	mov	r5, r3
 8005968:	4643      	mov	r3, r8
 800596a:	18e3      	adds	r3, r4, r3
 800596c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005970:	464b      	mov	r3, r9
 8005972:	eb45 0303 	adc.w	r3, r5, r3
 8005976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005986:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005996:	4629      	mov	r1, r5
 8005998:	008b      	lsls	r3, r1, #2
 800599a:	4621      	mov	r1, r4
 800599c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a0:	4621      	mov	r1, r4
 80059a2:	008a      	lsls	r2, r1, #2
 80059a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059a8:	f7fa fc82 	bl	80002b0 <__aeabi_uldivmod>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4b60      	ldr	r3, [pc, #384]	; (8005b34 <UART_SetConfig+0x4e4>)
 80059b2:	fba3 2302 	umull	r2, r3, r3, r2
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	011c      	lsls	r4, r3, #4
 80059ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	1891      	adds	r1, r2, r2
 80059d2:	61b9      	str	r1, [r7, #24]
 80059d4:	415b      	adcs	r3, r3
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059dc:	4641      	mov	r1, r8
 80059de:	1851      	adds	r1, r2, r1
 80059e0:	6139      	str	r1, [r7, #16]
 80059e2:	4649      	mov	r1, r9
 80059e4:	414b      	adcs	r3, r1
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059f4:	4659      	mov	r1, fp
 80059f6:	00cb      	lsls	r3, r1, #3
 80059f8:	4651      	mov	r1, sl
 80059fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059fe:	4651      	mov	r1, sl
 8005a00:	00ca      	lsls	r2, r1, #3
 8005a02:	4610      	mov	r0, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	4642      	mov	r2, r8
 8005a0a:	189b      	adds	r3, r3, r2
 8005a0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a10:	464b      	mov	r3, r9
 8005a12:	460a      	mov	r2, r1
 8005a14:	eb42 0303 	adc.w	r3, r2, r3
 8005a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a34:	4649      	mov	r1, r9
 8005a36:	008b      	lsls	r3, r1, #2
 8005a38:	4641      	mov	r1, r8
 8005a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a3e:	4641      	mov	r1, r8
 8005a40:	008a      	lsls	r2, r1, #2
 8005a42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a46:	f7fa fc33 	bl	80002b0 <__aeabi_uldivmod>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4b39      	ldr	r3, [pc, #228]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005a50:	fba3 1302 	umull	r1, r3, r3, r2
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	2164      	movs	r1, #100	; 0x64
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	3332      	adds	r3, #50	; 0x32
 8005a62:	4a34      	ldr	r2, [pc, #208]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a6e:	441c      	add	r4, r3
 8005a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a74:	2200      	movs	r2, #0
 8005a76:	673b      	str	r3, [r7, #112]	; 0x70
 8005a78:	677a      	str	r2, [r7, #116]	; 0x74
 8005a7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a7e:	4642      	mov	r2, r8
 8005a80:	464b      	mov	r3, r9
 8005a82:	1891      	adds	r1, r2, r2
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	415b      	adcs	r3, r3
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a8e:	4641      	mov	r1, r8
 8005a90:	1851      	adds	r1, r2, r1
 8005a92:	6039      	str	r1, [r7, #0]
 8005a94:	4649      	mov	r1, r9
 8005a96:	414b      	adcs	r3, r1
 8005a98:	607b      	str	r3, [r7, #4]
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005aa6:	4659      	mov	r1, fp
 8005aa8:	00cb      	lsls	r3, r1, #3
 8005aaa:	4651      	mov	r1, sl
 8005aac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ab0:	4651      	mov	r1, sl
 8005ab2:	00ca      	lsls	r2, r1, #3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4603      	mov	r3, r0
 8005aba:	4642      	mov	r2, r8
 8005abc:	189b      	adds	r3, r3, r2
 8005abe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	460a      	mov	r2, r1
 8005ac4:	eb42 0303 	adc.w	r3, r2, r3
 8005ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ad4:	667a      	str	r2, [r7, #100]	; 0x64
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	008b      	lsls	r3, r1, #2
 8005ae6:	4641      	mov	r1, r8
 8005ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aec:	4641      	mov	r1, r8
 8005aee:	008a      	lsls	r2, r1, #2
 8005af0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005af4:	f7fa fbdc 	bl	80002b0 <__aeabi_uldivmod>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005afe:	fba3 1302 	umull	r1, r3, r3, r2
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	2164      	movs	r1, #100	; 0x64
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	3332      	adds	r3, #50	; 0x32
 8005b10:	4a08      	ldr	r2, [pc, #32]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	f003 020f 	and.w	r2, r3, #15
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4422      	add	r2, r4
 8005b24:	609a      	str	r2, [r3, #8]
}
 8005b26:	bf00      	nop
 8005b28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b32:	bf00      	nop
 8005b34:	51eb851f 	.word	0x51eb851f

08005b38 <atoi>:
 8005b38:	220a      	movs	r2, #10
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	f000 ba56 	b.w	8005fec <strtol>

08005b40 <__errno>:
 8005b40:	4b01      	ldr	r3, [pc, #4]	; (8005b48 <__errno+0x8>)
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	2000000c 	.word	0x2000000c

08005b4c <__libc_init_array>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4d0d      	ldr	r5, [pc, #52]	; (8005b84 <__libc_init_array+0x38>)
 8005b50:	4c0d      	ldr	r4, [pc, #52]	; (8005b88 <__libc_init_array+0x3c>)
 8005b52:	1b64      	subs	r4, r4, r5
 8005b54:	10a4      	asrs	r4, r4, #2
 8005b56:	2600      	movs	r6, #0
 8005b58:	42a6      	cmp	r6, r4
 8005b5a:	d109      	bne.n	8005b70 <__libc_init_array+0x24>
 8005b5c:	4d0b      	ldr	r5, [pc, #44]	; (8005b8c <__libc_init_array+0x40>)
 8005b5e:	4c0c      	ldr	r4, [pc, #48]	; (8005b90 <__libc_init_array+0x44>)
 8005b60:	f001 f8d4 	bl	8006d0c <_init>
 8005b64:	1b64      	subs	r4, r4, r5
 8005b66:	10a4      	asrs	r4, r4, #2
 8005b68:	2600      	movs	r6, #0
 8005b6a:	42a6      	cmp	r6, r4
 8005b6c:	d105      	bne.n	8005b7a <__libc_init_array+0x2e>
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b74:	4798      	blx	r3
 8005b76:	3601      	adds	r6, #1
 8005b78:	e7ee      	b.n	8005b58 <__libc_init_array+0xc>
 8005b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7e:	4798      	blx	r3
 8005b80:	3601      	adds	r6, #1
 8005b82:	e7f2      	b.n	8005b6a <__libc_init_array+0x1e>
 8005b84:	080070ec 	.word	0x080070ec
 8005b88:	080070ec 	.word	0x080070ec
 8005b8c:	080070ec 	.word	0x080070ec
 8005b90:	080070f0 	.word	0x080070f0

08005b94 <malloc>:
 8005b94:	4b02      	ldr	r3, [pc, #8]	; (8005ba0 <malloc+0xc>)
 8005b96:	4601      	mov	r1, r0
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	f000 b87f 	b.w	8005c9c <_malloc_r>
 8005b9e:	bf00      	nop
 8005ba0:	2000000c 	.word	0x2000000c

08005ba4 <free>:
 8005ba4:	4b02      	ldr	r3, [pc, #8]	; (8005bb0 <free+0xc>)
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	f000 b80b 	b.w	8005bc4 <_free_r>
 8005bae:	bf00      	nop
 8005bb0:	2000000c 	.word	0x2000000c

08005bb4 <memset>:
 8005bb4:	4402      	add	r2, r0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d100      	bne.n	8005bbe <memset+0xa>
 8005bbc:	4770      	bx	lr
 8005bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc2:	e7f9      	b.n	8005bb8 <memset+0x4>

08005bc4 <_free_r>:
 8005bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d044      	beq.n	8005c54 <_free_r+0x90>
 8005bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bce:	9001      	str	r0, [sp, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005bd6:	bfb8      	it	lt
 8005bd8:	18e4      	addlt	r4, r4, r3
 8005bda:	f000 fcf1 	bl	80065c0 <__malloc_lock>
 8005bde:	4a1e      	ldr	r2, [pc, #120]	; (8005c58 <_free_r+0x94>)
 8005be0:	9801      	ldr	r0, [sp, #4]
 8005be2:	6813      	ldr	r3, [r2, #0]
 8005be4:	b933      	cbnz	r3, 8005bf4 <_free_r+0x30>
 8005be6:	6063      	str	r3, [r4, #4]
 8005be8:	6014      	str	r4, [r2, #0]
 8005bea:	b003      	add	sp, #12
 8005bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bf0:	f000 bcec 	b.w	80065cc <__malloc_unlock>
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	d908      	bls.n	8005c0a <_free_r+0x46>
 8005bf8:	6825      	ldr	r5, [r4, #0]
 8005bfa:	1961      	adds	r1, r4, r5
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	bf01      	itttt	eq
 8005c00:	6819      	ldreq	r1, [r3, #0]
 8005c02:	685b      	ldreq	r3, [r3, #4]
 8005c04:	1949      	addeq	r1, r1, r5
 8005c06:	6021      	streq	r1, [r4, #0]
 8005c08:	e7ed      	b.n	8005be6 <_free_r+0x22>
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	b10b      	cbz	r3, 8005c14 <_free_r+0x50>
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d9fa      	bls.n	8005c0a <_free_r+0x46>
 8005c14:	6811      	ldr	r1, [r2, #0]
 8005c16:	1855      	adds	r5, r2, r1
 8005c18:	42a5      	cmp	r5, r4
 8005c1a:	d10b      	bne.n	8005c34 <_free_r+0x70>
 8005c1c:	6824      	ldr	r4, [r4, #0]
 8005c1e:	4421      	add	r1, r4
 8005c20:	1854      	adds	r4, r2, r1
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	6011      	str	r1, [r2, #0]
 8005c26:	d1e0      	bne.n	8005bea <_free_r+0x26>
 8005c28:	681c      	ldr	r4, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	6053      	str	r3, [r2, #4]
 8005c2e:	4421      	add	r1, r4
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	e7da      	b.n	8005bea <_free_r+0x26>
 8005c34:	d902      	bls.n	8005c3c <_free_r+0x78>
 8005c36:	230c      	movs	r3, #12
 8005c38:	6003      	str	r3, [r0, #0]
 8005c3a:	e7d6      	b.n	8005bea <_free_r+0x26>
 8005c3c:	6825      	ldr	r5, [r4, #0]
 8005c3e:	1961      	adds	r1, r4, r5
 8005c40:	428b      	cmp	r3, r1
 8005c42:	bf04      	itt	eq
 8005c44:	6819      	ldreq	r1, [r3, #0]
 8005c46:	685b      	ldreq	r3, [r3, #4]
 8005c48:	6063      	str	r3, [r4, #4]
 8005c4a:	bf04      	itt	eq
 8005c4c:	1949      	addeq	r1, r1, r5
 8005c4e:	6021      	streq	r1, [r4, #0]
 8005c50:	6054      	str	r4, [r2, #4]
 8005c52:	e7ca      	b.n	8005bea <_free_r+0x26>
 8005c54:	b003      	add	sp, #12
 8005c56:	bd30      	pop	{r4, r5, pc}
 8005c58:	200002ac 	.word	0x200002ac

08005c5c <sbrk_aligned>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4e0e      	ldr	r6, [pc, #56]	; (8005c98 <sbrk_aligned+0x3c>)
 8005c60:	460c      	mov	r4, r1
 8005c62:	6831      	ldr	r1, [r6, #0]
 8005c64:	4605      	mov	r5, r0
 8005c66:	b911      	cbnz	r1, 8005c6e <sbrk_aligned+0x12>
 8005c68:	f000 f91a 	bl	8005ea0 <_sbrk_r>
 8005c6c:	6030      	str	r0, [r6, #0]
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 f915 	bl	8005ea0 <_sbrk_r>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	d00a      	beq.n	8005c90 <sbrk_aligned+0x34>
 8005c7a:	1cc4      	adds	r4, r0, #3
 8005c7c:	f024 0403 	bic.w	r4, r4, #3
 8005c80:	42a0      	cmp	r0, r4
 8005c82:	d007      	beq.n	8005c94 <sbrk_aligned+0x38>
 8005c84:	1a21      	subs	r1, r4, r0
 8005c86:	4628      	mov	r0, r5
 8005c88:	f000 f90a 	bl	8005ea0 <_sbrk_r>
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d101      	bne.n	8005c94 <sbrk_aligned+0x38>
 8005c90:	f04f 34ff 	mov.w	r4, #4294967295
 8005c94:	4620      	mov	r0, r4
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	200002b0 	.word	0x200002b0

08005c9c <_malloc_r>:
 8005c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca0:	1ccd      	adds	r5, r1, #3
 8005ca2:	f025 0503 	bic.w	r5, r5, #3
 8005ca6:	3508      	adds	r5, #8
 8005ca8:	2d0c      	cmp	r5, #12
 8005caa:	bf38      	it	cc
 8005cac:	250c      	movcc	r5, #12
 8005cae:	2d00      	cmp	r5, #0
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	db01      	blt.n	8005cb8 <_malloc_r+0x1c>
 8005cb4:	42a9      	cmp	r1, r5
 8005cb6:	d905      	bls.n	8005cc4 <_malloc_r+0x28>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	2600      	movs	r6, #0
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc4:	4e2e      	ldr	r6, [pc, #184]	; (8005d80 <_malloc_r+0xe4>)
 8005cc6:	f000 fc7b 	bl	80065c0 <__malloc_lock>
 8005cca:	6833      	ldr	r3, [r6, #0]
 8005ccc:	461c      	mov	r4, r3
 8005cce:	bb34      	cbnz	r4, 8005d1e <_malloc_r+0x82>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f7ff ffc2 	bl	8005c5c <sbrk_aligned>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	4604      	mov	r4, r0
 8005cdc:	d14d      	bne.n	8005d7a <_malloc_r+0xde>
 8005cde:	6834      	ldr	r4, [r6, #0]
 8005ce0:	4626      	mov	r6, r4
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	d140      	bne.n	8005d68 <_malloc_r+0xcc>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4638      	mov	r0, r7
 8005cec:	eb04 0803 	add.w	r8, r4, r3
 8005cf0:	f000 f8d6 	bl	8005ea0 <_sbrk_r>
 8005cf4:	4580      	cmp	r8, r0
 8005cf6:	d13a      	bne.n	8005d6e <_malloc_r+0xd2>
 8005cf8:	6821      	ldr	r1, [r4, #0]
 8005cfa:	3503      	adds	r5, #3
 8005cfc:	1a6d      	subs	r5, r5, r1
 8005cfe:	f025 0503 	bic.w	r5, r5, #3
 8005d02:	3508      	adds	r5, #8
 8005d04:	2d0c      	cmp	r5, #12
 8005d06:	bf38      	it	cc
 8005d08:	250c      	movcc	r5, #12
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f7ff ffa5 	bl	8005c5c <sbrk_aligned>
 8005d12:	3001      	adds	r0, #1
 8005d14:	d02b      	beq.n	8005d6e <_malloc_r+0xd2>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	442b      	add	r3, r5
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	e00e      	b.n	8005d3c <_malloc_r+0xa0>
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	1b52      	subs	r2, r2, r5
 8005d22:	d41e      	bmi.n	8005d62 <_malloc_r+0xc6>
 8005d24:	2a0b      	cmp	r2, #11
 8005d26:	d916      	bls.n	8005d56 <_malloc_r+0xba>
 8005d28:	1961      	adds	r1, r4, r5
 8005d2a:	42a3      	cmp	r3, r4
 8005d2c:	6025      	str	r5, [r4, #0]
 8005d2e:	bf18      	it	ne
 8005d30:	6059      	strne	r1, [r3, #4]
 8005d32:	6863      	ldr	r3, [r4, #4]
 8005d34:	bf08      	it	eq
 8005d36:	6031      	streq	r1, [r6, #0]
 8005d38:	5162      	str	r2, [r4, r5]
 8005d3a:	604b      	str	r3, [r1, #4]
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	f104 060b 	add.w	r6, r4, #11
 8005d42:	f000 fc43 	bl	80065cc <__malloc_unlock>
 8005d46:	f026 0607 	bic.w	r6, r6, #7
 8005d4a:	1d23      	adds	r3, r4, #4
 8005d4c:	1af2      	subs	r2, r6, r3
 8005d4e:	d0b6      	beq.n	8005cbe <_malloc_r+0x22>
 8005d50:	1b9b      	subs	r3, r3, r6
 8005d52:	50a3      	str	r3, [r4, r2]
 8005d54:	e7b3      	b.n	8005cbe <_malloc_r+0x22>
 8005d56:	6862      	ldr	r2, [r4, #4]
 8005d58:	42a3      	cmp	r3, r4
 8005d5a:	bf0c      	ite	eq
 8005d5c:	6032      	streq	r2, [r6, #0]
 8005d5e:	605a      	strne	r2, [r3, #4]
 8005d60:	e7ec      	b.n	8005d3c <_malloc_r+0xa0>
 8005d62:	4623      	mov	r3, r4
 8005d64:	6864      	ldr	r4, [r4, #4]
 8005d66:	e7b2      	b.n	8005cce <_malloc_r+0x32>
 8005d68:	4634      	mov	r4, r6
 8005d6a:	6876      	ldr	r6, [r6, #4]
 8005d6c:	e7b9      	b.n	8005ce2 <_malloc_r+0x46>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4638      	mov	r0, r7
 8005d74:	f000 fc2a 	bl	80065cc <__malloc_unlock>
 8005d78:	e7a1      	b.n	8005cbe <_malloc_r+0x22>
 8005d7a:	6025      	str	r5, [r4, #0]
 8005d7c:	e7de      	b.n	8005d3c <_malloc_r+0xa0>
 8005d7e:	bf00      	nop
 8005d80:	200002ac 	.word	0x200002ac

08005d84 <iprintf>:
 8005d84:	b40f      	push	{r0, r1, r2, r3}
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <iprintf+0x2c>)
 8005d88:	b513      	push	{r0, r1, r4, lr}
 8005d8a:	681c      	ldr	r4, [r3, #0]
 8005d8c:	b124      	cbz	r4, 8005d98 <iprintf+0x14>
 8005d8e:	69a3      	ldr	r3, [r4, #24]
 8005d90:	b913      	cbnz	r3, 8005d98 <iprintf+0x14>
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 fb0e 	bl	80063b4 <__sinit>
 8005d98:	ab05      	add	r3, sp, #20
 8005d9a:	9a04      	ldr	r2, [sp, #16]
 8005d9c:	68a1      	ldr	r1, [r4, #8]
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	4620      	mov	r0, r4
 8005da2:	f000 fc43 	bl	800662c <_vfiprintf_r>
 8005da6:	b002      	add	sp, #8
 8005da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dac:	b004      	add	sp, #16
 8005dae:	4770      	bx	lr
 8005db0:	2000000c 	.word	0x2000000c

08005db4 <_puts_r>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	460e      	mov	r6, r1
 8005db8:	4605      	mov	r5, r0
 8005dba:	b118      	cbz	r0, 8005dc4 <_puts_r+0x10>
 8005dbc:	6983      	ldr	r3, [r0, #24]
 8005dbe:	b90b      	cbnz	r3, 8005dc4 <_puts_r+0x10>
 8005dc0:	f000 faf8 	bl	80063b4 <__sinit>
 8005dc4:	69ab      	ldr	r3, [r5, #24]
 8005dc6:	68ac      	ldr	r4, [r5, #8]
 8005dc8:	b913      	cbnz	r3, 8005dd0 <_puts_r+0x1c>
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 faf2 	bl	80063b4 <__sinit>
 8005dd0:	4b2c      	ldr	r3, [pc, #176]	; (8005e84 <_puts_r+0xd0>)
 8005dd2:	429c      	cmp	r4, r3
 8005dd4:	d120      	bne.n	8005e18 <_puts_r+0x64>
 8005dd6:	686c      	ldr	r4, [r5, #4]
 8005dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dda:	07db      	lsls	r3, r3, #31
 8005ddc:	d405      	bmi.n	8005dea <_puts_r+0x36>
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	0598      	lsls	r0, r3, #22
 8005de2:	d402      	bmi.n	8005dea <_puts_r+0x36>
 8005de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005de6:	f000 fb83 	bl	80064f0 <__retarget_lock_acquire_recursive>
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	0719      	lsls	r1, r3, #28
 8005dee:	d51d      	bpl.n	8005e2c <_puts_r+0x78>
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	b1db      	cbz	r3, 8005e2c <_puts_r+0x78>
 8005df4:	3e01      	subs	r6, #1
 8005df6:	68a3      	ldr	r3, [r4, #8]
 8005df8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	60a3      	str	r3, [r4, #8]
 8005e00:	bb39      	cbnz	r1, 8005e52 <_puts_r+0x9e>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	da38      	bge.n	8005e78 <_puts_r+0xc4>
 8005e06:	4622      	mov	r2, r4
 8005e08:	210a      	movs	r1, #10
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f000 f8f8 	bl	8006000 <__swbuf_r>
 8005e10:	3001      	adds	r0, #1
 8005e12:	d011      	beq.n	8005e38 <_puts_r+0x84>
 8005e14:	250a      	movs	r5, #10
 8005e16:	e011      	b.n	8005e3c <_puts_r+0x88>
 8005e18:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <_puts_r+0xd4>)
 8005e1a:	429c      	cmp	r4, r3
 8005e1c:	d101      	bne.n	8005e22 <_puts_r+0x6e>
 8005e1e:	68ac      	ldr	r4, [r5, #8]
 8005e20:	e7da      	b.n	8005dd8 <_puts_r+0x24>
 8005e22:	4b1a      	ldr	r3, [pc, #104]	; (8005e8c <_puts_r+0xd8>)
 8005e24:	429c      	cmp	r4, r3
 8005e26:	bf08      	it	eq
 8005e28:	68ec      	ldreq	r4, [r5, #12]
 8005e2a:	e7d5      	b.n	8005dd8 <_puts_r+0x24>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 f938 	bl	80060a4 <__swsetup_r>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d0dd      	beq.n	8005df4 <_puts_r+0x40>
 8005e38:	f04f 35ff 	mov.w	r5, #4294967295
 8005e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e3e:	07da      	lsls	r2, r3, #31
 8005e40:	d405      	bmi.n	8005e4e <_puts_r+0x9a>
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	059b      	lsls	r3, r3, #22
 8005e46:	d402      	bmi.n	8005e4e <_puts_r+0x9a>
 8005e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e4a:	f000 fb52 	bl	80064f2 <__retarget_lock_release_recursive>
 8005e4e:	4628      	mov	r0, r5
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	da04      	bge.n	8005e60 <_puts_r+0xac>
 8005e56:	69a2      	ldr	r2, [r4, #24]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	dc06      	bgt.n	8005e6a <_puts_r+0xb6>
 8005e5c:	290a      	cmp	r1, #10
 8005e5e:	d004      	beq.n	8005e6a <_puts_r+0xb6>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	6022      	str	r2, [r4, #0]
 8005e66:	7019      	strb	r1, [r3, #0]
 8005e68:	e7c5      	b.n	8005df6 <_puts_r+0x42>
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 f8c7 	bl	8006000 <__swbuf_r>
 8005e72:	3001      	adds	r0, #1
 8005e74:	d1bf      	bne.n	8005df6 <_puts_r+0x42>
 8005e76:	e7df      	b.n	8005e38 <_puts_r+0x84>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	250a      	movs	r5, #10
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	6022      	str	r2, [r4, #0]
 8005e80:	701d      	strb	r5, [r3, #0]
 8005e82:	e7db      	b.n	8005e3c <_puts_r+0x88>
 8005e84:	08007070 	.word	0x08007070
 8005e88:	08007090 	.word	0x08007090
 8005e8c:	08007050 	.word	0x08007050

08005e90 <puts>:
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <puts+0xc>)
 8005e92:	4601      	mov	r1, r0
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	f7ff bf8d 	b.w	8005db4 <_puts_r>
 8005e9a:	bf00      	nop
 8005e9c:	2000000c 	.word	0x2000000c

08005ea0 <_sbrk_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4d06      	ldr	r5, [pc, #24]	; (8005ebc <_sbrk_r+0x1c>)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	602b      	str	r3, [r5, #0]
 8005eac:	f7fb fa74 	bl	8001398 <_sbrk>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_sbrk_r+0x1a>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_sbrk_r+0x1a>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	200002b8 	.word	0x200002b8

08005ec0 <strncmp>:
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	b17a      	cbz	r2, 8005ee4 <strncmp+0x24>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	3901      	subs	r1, #1
 8005ec8:	1884      	adds	r4, r0, r2
 8005eca:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005ece:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005ed2:	4290      	cmp	r0, r2
 8005ed4:	d101      	bne.n	8005eda <strncmp+0x1a>
 8005ed6:	42a3      	cmp	r3, r4
 8005ed8:	d101      	bne.n	8005ede <strncmp+0x1e>
 8005eda:	1a80      	subs	r0, r0, r2
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d1f3      	bne.n	8005eca <strncmp+0xa>
 8005ee2:	e7fa      	b.n	8005eda <strncmp+0x1a>
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	e7f9      	b.n	8005edc <strncmp+0x1c>

08005ee8 <_strtol_l.constprop.0>:
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eee:	d001      	beq.n	8005ef4 <_strtol_l.constprop.0+0xc>
 8005ef0:	2b24      	cmp	r3, #36	; 0x24
 8005ef2:	d906      	bls.n	8005f02 <_strtol_l.constprop.0+0x1a>
 8005ef4:	f7ff fe24 	bl	8005b40 <__errno>
 8005ef8:	2316      	movs	r3, #22
 8005efa:	6003      	str	r3, [r0, #0]
 8005efc:	2000      	movs	r0, #0
 8005efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005fe8 <_strtol_l.constprop.0+0x100>
 8005f06:	460d      	mov	r5, r1
 8005f08:	462e      	mov	r6, r5
 8005f0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005f12:	f017 0708 	ands.w	r7, r7, #8
 8005f16:	d1f7      	bne.n	8005f08 <_strtol_l.constprop.0+0x20>
 8005f18:	2c2d      	cmp	r4, #45	; 0x2d
 8005f1a:	d132      	bne.n	8005f82 <_strtol_l.constprop.0+0x9a>
 8005f1c:	782c      	ldrb	r4, [r5, #0]
 8005f1e:	2701      	movs	r7, #1
 8005f20:	1cb5      	adds	r5, r6, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d05b      	beq.n	8005fde <_strtol_l.constprop.0+0xf6>
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d109      	bne.n	8005f3e <_strtol_l.constprop.0+0x56>
 8005f2a:	2c30      	cmp	r4, #48	; 0x30
 8005f2c:	d107      	bne.n	8005f3e <_strtol_l.constprop.0+0x56>
 8005f2e:	782c      	ldrb	r4, [r5, #0]
 8005f30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f34:	2c58      	cmp	r4, #88	; 0x58
 8005f36:	d14d      	bne.n	8005fd4 <_strtol_l.constprop.0+0xec>
 8005f38:	786c      	ldrb	r4, [r5, #1]
 8005f3a:	2310      	movs	r3, #16
 8005f3c:	3502      	adds	r5, #2
 8005f3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005f42:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f46:	f04f 0c00 	mov.w	ip, #0
 8005f4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005f4e:	4666      	mov	r6, ip
 8005f50:	fb03 8a19 	mls	sl, r3, r9, r8
 8005f54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005f58:	f1be 0f09 	cmp.w	lr, #9
 8005f5c:	d816      	bhi.n	8005f8c <_strtol_l.constprop.0+0xa4>
 8005f5e:	4674      	mov	r4, lr
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	dd24      	ble.n	8005fae <_strtol_l.constprop.0+0xc6>
 8005f64:	f1bc 0f00 	cmp.w	ip, #0
 8005f68:	db1e      	blt.n	8005fa8 <_strtol_l.constprop.0+0xc0>
 8005f6a:	45b1      	cmp	r9, r6
 8005f6c:	d31c      	bcc.n	8005fa8 <_strtol_l.constprop.0+0xc0>
 8005f6e:	d101      	bne.n	8005f74 <_strtol_l.constprop.0+0x8c>
 8005f70:	45a2      	cmp	sl, r4
 8005f72:	db19      	blt.n	8005fa8 <_strtol_l.constprop.0+0xc0>
 8005f74:	fb06 4603 	mla	r6, r6, r3, r4
 8005f78:	f04f 0c01 	mov.w	ip, #1
 8005f7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f80:	e7e8      	b.n	8005f54 <_strtol_l.constprop.0+0x6c>
 8005f82:	2c2b      	cmp	r4, #43	; 0x2b
 8005f84:	bf04      	itt	eq
 8005f86:	782c      	ldrbeq	r4, [r5, #0]
 8005f88:	1cb5      	addeq	r5, r6, #2
 8005f8a:	e7ca      	b.n	8005f22 <_strtol_l.constprop.0+0x3a>
 8005f8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005f90:	f1be 0f19 	cmp.w	lr, #25
 8005f94:	d801      	bhi.n	8005f9a <_strtol_l.constprop.0+0xb2>
 8005f96:	3c37      	subs	r4, #55	; 0x37
 8005f98:	e7e2      	b.n	8005f60 <_strtol_l.constprop.0+0x78>
 8005f9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005f9e:	f1be 0f19 	cmp.w	lr, #25
 8005fa2:	d804      	bhi.n	8005fae <_strtol_l.constprop.0+0xc6>
 8005fa4:	3c57      	subs	r4, #87	; 0x57
 8005fa6:	e7db      	b.n	8005f60 <_strtol_l.constprop.0+0x78>
 8005fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8005fac:	e7e6      	b.n	8005f7c <_strtol_l.constprop.0+0x94>
 8005fae:	f1bc 0f00 	cmp.w	ip, #0
 8005fb2:	da05      	bge.n	8005fc0 <_strtol_l.constprop.0+0xd8>
 8005fb4:	2322      	movs	r3, #34	; 0x22
 8005fb6:	6003      	str	r3, [r0, #0]
 8005fb8:	4646      	mov	r6, r8
 8005fba:	b942      	cbnz	r2, 8005fce <_strtol_l.constprop.0+0xe6>
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	e79e      	b.n	8005efe <_strtol_l.constprop.0+0x16>
 8005fc0:	b107      	cbz	r7, 8005fc4 <_strtol_l.constprop.0+0xdc>
 8005fc2:	4276      	negs	r6, r6
 8005fc4:	2a00      	cmp	r2, #0
 8005fc6:	d0f9      	beq.n	8005fbc <_strtol_l.constprop.0+0xd4>
 8005fc8:	f1bc 0f00 	cmp.w	ip, #0
 8005fcc:	d000      	beq.n	8005fd0 <_strtol_l.constprop.0+0xe8>
 8005fce:	1e69      	subs	r1, r5, #1
 8005fd0:	6011      	str	r1, [r2, #0]
 8005fd2:	e7f3      	b.n	8005fbc <_strtol_l.constprop.0+0xd4>
 8005fd4:	2430      	movs	r4, #48	; 0x30
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1b1      	bne.n	8005f3e <_strtol_l.constprop.0+0x56>
 8005fda:	2308      	movs	r3, #8
 8005fdc:	e7af      	b.n	8005f3e <_strtol_l.constprop.0+0x56>
 8005fde:	2c30      	cmp	r4, #48	; 0x30
 8005fe0:	d0a5      	beq.n	8005f2e <_strtol_l.constprop.0+0x46>
 8005fe2:	230a      	movs	r3, #10
 8005fe4:	e7ab      	b.n	8005f3e <_strtol_l.constprop.0+0x56>
 8005fe6:	bf00      	nop
 8005fe8:	08006f4d 	.word	0x08006f4d

08005fec <strtol>:
 8005fec:	4613      	mov	r3, r2
 8005fee:	460a      	mov	r2, r1
 8005ff0:	4601      	mov	r1, r0
 8005ff2:	4802      	ldr	r0, [pc, #8]	; (8005ffc <strtol+0x10>)
 8005ff4:	6800      	ldr	r0, [r0, #0]
 8005ff6:	f7ff bf77 	b.w	8005ee8 <_strtol_l.constprop.0>
 8005ffa:	bf00      	nop
 8005ffc:	2000000c 	.word	0x2000000c

08006000 <__swbuf_r>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	460e      	mov	r6, r1
 8006004:	4614      	mov	r4, r2
 8006006:	4605      	mov	r5, r0
 8006008:	b118      	cbz	r0, 8006012 <__swbuf_r+0x12>
 800600a:	6983      	ldr	r3, [r0, #24]
 800600c:	b90b      	cbnz	r3, 8006012 <__swbuf_r+0x12>
 800600e:	f000 f9d1 	bl	80063b4 <__sinit>
 8006012:	4b21      	ldr	r3, [pc, #132]	; (8006098 <__swbuf_r+0x98>)
 8006014:	429c      	cmp	r4, r3
 8006016:	d12b      	bne.n	8006070 <__swbuf_r+0x70>
 8006018:	686c      	ldr	r4, [r5, #4]
 800601a:	69a3      	ldr	r3, [r4, #24]
 800601c:	60a3      	str	r3, [r4, #8]
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	071a      	lsls	r2, r3, #28
 8006022:	d52f      	bpl.n	8006084 <__swbuf_r+0x84>
 8006024:	6923      	ldr	r3, [r4, #16]
 8006026:	b36b      	cbz	r3, 8006084 <__swbuf_r+0x84>
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	6820      	ldr	r0, [r4, #0]
 800602c:	1ac0      	subs	r0, r0, r3
 800602e:	6963      	ldr	r3, [r4, #20]
 8006030:	b2f6      	uxtb	r6, r6
 8006032:	4283      	cmp	r3, r0
 8006034:	4637      	mov	r7, r6
 8006036:	dc04      	bgt.n	8006042 <__swbuf_r+0x42>
 8006038:	4621      	mov	r1, r4
 800603a:	4628      	mov	r0, r5
 800603c:	f000 f926 	bl	800628c <_fflush_r>
 8006040:	bb30      	cbnz	r0, 8006090 <__swbuf_r+0x90>
 8006042:	68a3      	ldr	r3, [r4, #8]
 8006044:	3b01      	subs	r3, #1
 8006046:	60a3      	str	r3, [r4, #8]
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	6022      	str	r2, [r4, #0]
 800604e:	701e      	strb	r6, [r3, #0]
 8006050:	6963      	ldr	r3, [r4, #20]
 8006052:	3001      	adds	r0, #1
 8006054:	4283      	cmp	r3, r0
 8006056:	d004      	beq.n	8006062 <__swbuf_r+0x62>
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	07db      	lsls	r3, r3, #31
 800605c:	d506      	bpl.n	800606c <__swbuf_r+0x6c>
 800605e:	2e0a      	cmp	r6, #10
 8006060:	d104      	bne.n	800606c <__swbuf_r+0x6c>
 8006062:	4621      	mov	r1, r4
 8006064:	4628      	mov	r0, r5
 8006066:	f000 f911 	bl	800628c <_fflush_r>
 800606a:	b988      	cbnz	r0, 8006090 <__swbuf_r+0x90>
 800606c:	4638      	mov	r0, r7
 800606e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <__swbuf_r+0x9c>)
 8006072:	429c      	cmp	r4, r3
 8006074:	d101      	bne.n	800607a <__swbuf_r+0x7a>
 8006076:	68ac      	ldr	r4, [r5, #8]
 8006078:	e7cf      	b.n	800601a <__swbuf_r+0x1a>
 800607a:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <__swbuf_r+0xa0>)
 800607c:	429c      	cmp	r4, r3
 800607e:	bf08      	it	eq
 8006080:	68ec      	ldreq	r4, [r5, #12]
 8006082:	e7ca      	b.n	800601a <__swbuf_r+0x1a>
 8006084:	4621      	mov	r1, r4
 8006086:	4628      	mov	r0, r5
 8006088:	f000 f80c 	bl	80060a4 <__swsetup_r>
 800608c:	2800      	cmp	r0, #0
 800608e:	d0cb      	beq.n	8006028 <__swbuf_r+0x28>
 8006090:	f04f 37ff 	mov.w	r7, #4294967295
 8006094:	e7ea      	b.n	800606c <__swbuf_r+0x6c>
 8006096:	bf00      	nop
 8006098:	08007070 	.word	0x08007070
 800609c:	08007090 	.word	0x08007090
 80060a0:	08007050 	.word	0x08007050

080060a4 <__swsetup_r>:
 80060a4:	4b32      	ldr	r3, [pc, #200]	; (8006170 <__swsetup_r+0xcc>)
 80060a6:	b570      	push	{r4, r5, r6, lr}
 80060a8:	681d      	ldr	r5, [r3, #0]
 80060aa:	4606      	mov	r6, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	b125      	cbz	r5, 80060ba <__swsetup_r+0x16>
 80060b0:	69ab      	ldr	r3, [r5, #24]
 80060b2:	b913      	cbnz	r3, 80060ba <__swsetup_r+0x16>
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 f97d 	bl	80063b4 <__sinit>
 80060ba:	4b2e      	ldr	r3, [pc, #184]	; (8006174 <__swsetup_r+0xd0>)
 80060bc:	429c      	cmp	r4, r3
 80060be:	d10f      	bne.n	80060e0 <__swsetup_r+0x3c>
 80060c0:	686c      	ldr	r4, [r5, #4]
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060c8:	0719      	lsls	r1, r3, #28
 80060ca:	d42c      	bmi.n	8006126 <__swsetup_r+0x82>
 80060cc:	06dd      	lsls	r5, r3, #27
 80060ce:	d411      	bmi.n	80060f4 <__swsetup_r+0x50>
 80060d0:	2309      	movs	r3, #9
 80060d2:	6033      	str	r3, [r6, #0]
 80060d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060d8:	81a3      	strh	r3, [r4, #12]
 80060da:	f04f 30ff 	mov.w	r0, #4294967295
 80060de:	e03e      	b.n	800615e <__swsetup_r+0xba>
 80060e0:	4b25      	ldr	r3, [pc, #148]	; (8006178 <__swsetup_r+0xd4>)
 80060e2:	429c      	cmp	r4, r3
 80060e4:	d101      	bne.n	80060ea <__swsetup_r+0x46>
 80060e6:	68ac      	ldr	r4, [r5, #8]
 80060e8:	e7eb      	b.n	80060c2 <__swsetup_r+0x1e>
 80060ea:	4b24      	ldr	r3, [pc, #144]	; (800617c <__swsetup_r+0xd8>)
 80060ec:	429c      	cmp	r4, r3
 80060ee:	bf08      	it	eq
 80060f0:	68ec      	ldreq	r4, [r5, #12]
 80060f2:	e7e6      	b.n	80060c2 <__swsetup_r+0x1e>
 80060f4:	0758      	lsls	r0, r3, #29
 80060f6:	d512      	bpl.n	800611e <__swsetup_r+0x7a>
 80060f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060fa:	b141      	cbz	r1, 800610e <__swsetup_r+0x6a>
 80060fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006100:	4299      	cmp	r1, r3
 8006102:	d002      	beq.n	800610a <__swsetup_r+0x66>
 8006104:	4630      	mov	r0, r6
 8006106:	f7ff fd5d 	bl	8005bc4 <_free_r>
 800610a:	2300      	movs	r3, #0
 800610c:	6363      	str	r3, [r4, #52]	; 0x34
 800610e:	89a3      	ldrh	r3, [r4, #12]
 8006110:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006114:	81a3      	strh	r3, [r4, #12]
 8006116:	2300      	movs	r3, #0
 8006118:	6063      	str	r3, [r4, #4]
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	f043 0308 	orr.w	r3, r3, #8
 8006124:	81a3      	strh	r3, [r4, #12]
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	b94b      	cbnz	r3, 800613e <__swsetup_r+0x9a>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006134:	d003      	beq.n	800613e <__swsetup_r+0x9a>
 8006136:	4621      	mov	r1, r4
 8006138:	4630      	mov	r0, r6
 800613a:	f000 fa01 	bl	8006540 <__smakebuf_r>
 800613e:	89a0      	ldrh	r0, [r4, #12]
 8006140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006144:	f010 0301 	ands.w	r3, r0, #1
 8006148:	d00a      	beq.n	8006160 <__swsetup_r+0xbc>
 800614a:	2300      	movs	r3, #0
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	6963      	ldr	r3, [r4, #20]
 8006150:	425b      	negs	r3, r3
 8006152:	61a3      	str	r3, [r4, #24]
 8006154:	6923      	ldr	r3, [r4, #16]
 8006156:	b943      	cbnz	r3, 800616a <__swsetup_r+0xc6>
 8006158:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800615c:	d1ba      	bne.n	80060d4 <__swsetup_r+0x30>
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	0781      	lsls	r1, r0, #30
 8006162:	bf58      	it	pl
 8006164:	6963      	ldrpl	r3, [r4, #20]
 8006166:	60a3      	str	r3, [r4, #8]
 8006168:	e7f4      	b.n	8006154 <__swsetup_r+0xb0>
 800616a:	2000      	movs	r0, #0
 800616c:	e7f7      	b.n	800615e <__swsetup_r+0xba>
 800616e:	bf00      	nop
 8006170:	2000000c 	.word	0x2000000c
 8006174:	08007070 	.word	0x08007070
 8006178:	08007090 	.word	0x08007090
 800617c:	08007050 	.word	0x08007050

08006180 <__sflush_r>:
 8006180:	898a      	ldrh	r2, [r1, #12]
 8006182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006186:	4605      	mov	r5, r0
 8006188:	0710      	lsls	r0, r2, #28
 800618a:	460c      	mov	r4, r1
 800618c:	d458      	bmi.n	8006240 <__sflush_r+0xc0>
 800618e:	684b      	ldr	r3, [r1, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	dc05      	bgt.n	80061a0 <__sflush_r+0x20>
 8006194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	dc02      	bgt.n	80061a0 <__sflush_r+0x20>
 800619a:	2000      	movs	r0, #0
 800619c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061a2:	2e00      	cmp	r6, #0
 80061a4:	d0f9      	beq.n	800619a <__sflush_r+0x1a>
 80061a6:	2300      	movs	r3, #0
 80061a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061ac:	682f      	ldr	r7, [r5, #0]
 80061ae:	602b      	str	r3, [r5, #0]
 80061b0:	d032      	beq.n	8006218 <__sflush_r+0x98>
 80061b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	075a      	lsls	r2, r3, #29
 80061b8:	d505      	bpl.n	80061c6 <__sflush_r+0x46>
 80061ba:	6863      	ldr	r3, [r4, #4]
 80061bc:	1ac0      	subs	r0, r0, r3
 80061be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061c0:	b10b      	cbz	r3, 80061c6 <__sflush_r+0x46>
 80061c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061c4:	1ac0      	subs	r0, r0, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	4602      	mov	r2, r0
 80061ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061cc:	6a21      	ldr	r1, [r4, #32]
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b0      	blx	r6
 80061d2:	1c43      	adds	r3, r0, #1
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	d106      	bne.n	80061e6 <__sflush_r+0x66>
 80061d8:	6829      	ldr	r1, [r5, #0]
 80061da:	291d      	cmp	r1, #29
 80061dc:	d82c      	bhi.n	8006238 <__sflush_r+0xb8>
 80061de:	4a2a      	ldr	r2, [pc, #168]	; (8006288 <__sflush_r+0x108>)
 80061e0:	40ca      	lsrs	r2, r1
 80061e2:	07d6      	lsls	r6, r2, #31
 80061e4:	d528      	bpl.n	8006238 <__sflush_r+0xb8>
 80061e6:	2200      	movs	r2, #0
 80061e8:	6062      	str	r2, [r4, #4]
 80061ea:	04d9      	lsls	r1, r3, #19
 80061ec:	6922      	ldr	r2, [r4, #16]
 80061ee:	6022      	str	r2, [r4, #0]
 80061f0:	d504      	bpl.n	80061fc <__sflush_r+0x7c>
 80061f2:	1c42      	adds	r2, r0, #1
 80061f4:	d101      	bne.n	80061fa <__sflush_r+0x7a>
 80061f6:	682b      	ldr	r3, [r5, #0]
 80061f8:	b903      	cbnz	r3, 80061fc <__sflush_r+0x7c>
 80061fa:	6560      	str	r0, [r4, #84]	; 0x54
 80061fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061fe:	602f      	str	r7, [r5, #0]
 8006200:	2900      	cmp	r1, #0
 8006202:	d0ca      	beq.n	800619a <__sflush_r+0x1a>
 8006204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006208:	4299      	cmp	r1, r3
 800620a:	d002      	beq.n	8006212 <__sflush_r+0x92>
 800620c:	4628      	mov	r0, r5
 800620e:	f7ff fcd9 	bl	8005bc4 <_free_r>
 8006212:	2000      	movs	r0, #0
 8006214:	6360      	str	r0, [r4, #52]	; 0x34
 8006216:	e7c1      	b.n	800619c <__sflush_r+0x1c>
 8006218:	6a21      	ldr	r1, [r4, #32]
 800621a:	2301      	movs	r3, #1
 800621c:	4628      	mov	r0, r5
 800621e:	47b0      	blx	r6
 8006220:	1c41      	adds	r1, r0, #1
 8006222:	d1c7      	bne.n	80061b4 <__sflush_r+0x34>
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0c4      	beq.n	80061b4 <__sflush_r+0x34>
 800622a:	2b1d      	cmp	r3, #29
 800622c:	d001      	beq.n	8006232 <__sflush_r+0xb2>
 800622e:	2b16      	cmp	r3, #22
 8006230:	d101      	bne.n	8006236 <__sflush_r+0xb6>
 8006232:	602f      	str	r7, [r5, #0]
 8006234:	e7b1      	b.n	800619a <__sflush_r+0x1a>
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	e7ad      	b.n	800619c <__sflush_r+0x1c>
 8006240:	690f      	ldr	r7, [r1, #16]
 8006242:	2f00      	cmp	r7, #0
 8006244:	d0a9      	beq.n	800619a <__sflush_r+0x1a>
 8006246:	0793      	lsls	r3, r2, #30
 8006248:	680e      	ldr	r6, [r1, #0]
 800624a:	bf08      	it	eq
 800624c:	694b      	ldreq	r3, [r1, #20]
 800624e:	600f      	str	r7, [r1, #0]
 8006250:	bf18      	it	ne
 8006252:	2300      	movne	r3, #0
 8006254:	eba6 0807 	sub.w	r8, r6, r7
 8006258:	608b      	str	r3, [r1, #8]
 800625a:	f1b8 0f00 	cmp.w	r8, #0
 800625e:	dd9c      	ble.n	800619a <__sflush_r+0x1a>
 8006260:	6a21      	ldr	r1, [r4, #32]
 8006262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006264:	4643      	mov	r3, r8
 8006266:	463a      	mov	r2, r7
 8006268:	4628      	mov	r0, r5
 800626a:	47b0      	blx	r6
 800626c:	2800      	cmp	r0, #0
 800626e:	dc06      	bgt.n	800627e <__sflush_r+0xfe>
 8006270:	89a3      	ldrh	r3, [r4, #12]
 8006272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	f04f 30ff 	mov.w	r0, #4294967295
 800627c:	e78e      	b.n	800619c <__sflush_r+0x1c>
 800627e:	4407      	add	r7, r0
 8006280:	eba8 0800 	sub.w	r8, r8, r0
 8006284:	e7e9      	b.n	800625a <__sflush_r+0xda>
 8006286:	bf00      	nop
 8006288:	20400001 	.word	0x20400001

0800628c <_fflush_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	690b      	ldr	r3, [r1, #16]
 8006290:	4605      	mov	r5, r0
 8006292:	460c      	mov	r4, r1
 8006294:	b913      	cbnz	r3, 800629c <_fflush_r+0x10>
 8006296:	2500      	movs	r5, #0
 8006298:	4628      	mov	r0, r5
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	b118      	cbz	r0, 80062a6 <_fflush_r+0x1a>
 800629e:	6983      	ldr	r3, [r0, #24]
 80062a0:	b90b      	cbnz	r3, 80062a6 <_fflush_r+0x1a>
 80062a2:	f000 f887 	bl	80063b4 <__sinit>
 80062a6:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <_fflush_r+0x6c>)
 80062a8:	429c      	cmp	r4, r3
 80062aa:	d11b      	bne.n	80062e4 <_fflush_r+0x58>
 80062ac:	686c      	ldr	r4, [r5, #4]
 80062ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0ef      	beq.n	8006296 <_fflush_r+0xa>
 80062b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062b8:	07d0      	lsls	r0, r2, #31
 80062ba:	d404      	bmi.n	80062c6 <_fflush_r+0x3a>
 80062bc:	0599      	lsls	r1, r3, #22
 80062be:	d402      	bmi.n	80062c6 <_fflush_r+0x3a>
 80062c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062c2:	f000 f915 	bl	80064f0 <__retarget_lock_acquire_recursive>
 80062c6:	4628      	mov	r0, r5
 80062c8:	4621      	mov	r1, r4
 80062ca:	f7ff ff59 	bl	8006180 <__sflush_r>
 80062ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062d0:	07da      	lsls	r2, r3, #31
 80062d2:	4605      	mov	r5, r0
 80062d4:	d4e0      	bmi.n	8006298 <_fflush_r+0xc>
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	059b      	lsls	r3, r3, #22
 80062da:	d4dd      	bmi.n	8006298 <_fflush_r+0xc>
 80062dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062de:	f000 f908 	bl	80064f2 <__retarget_lock_release_recursive>
 80062e2:	e7d9      	b.n	8006298 <_fflush_r+0xc>
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <_fflush_r+0x70>)
 80062e6:	429c      	cmp	r4, r3
 80062e8:	d101      	bne.n	80062ee <_fflush_r+0x62>
 80062ea:	68ac      	ldr	r4, [r5, #8]
 80062ec:	e7df      	b.n	80062ae <_fflush_r+0x22>
 80062ee:	4b04      	ldr	r3, [pc, #16]	; (8006300 <_fflush_r+0x74>)
 80062f0:	429c      	cmp	r4, r3
 80062f2:	bf08      	it	eq
 80062f4:	68ec      	ldreq	r4, [r5, #12]
 80062f6:	e7da      	b.n	80062ae <_fflush_r+0x22>
 80062f8:	08007070 	.word	0x08007070
 80062fc:	08007090 	.word	0x08007090
 8006300:	08007050 	.word	0x08007050

08006304 <std>:
 8006304:	2300      	movs	r3, #0
 8006306:	b510      	push	{r4, lr}
 8006308:	4604      	mov	r4, r0
 800630a:	e9c0 3300 	strd	r3, r3, [r0]
 800630e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006312:	6083      	str	r3, [r0, #8]
 8006314:	8181      	strh	r1, [r0, #12]
 8006316:	6643      	str	r3, [r0, #100]	; 0x64
 8006318:	81c2      	strh	r2, [r0, #14]
 800631a:	6183      	str	r3, [r0, #24]
 800631c:	4619      	mov	r1, r3
 800631e:	2208      	movs	r2, #8
 8006320:	305c      	adds	r0, #92	; 0x5c
 8006322:	f7ff fc47 	bl	8005bb4 <memset>
 8006326:	4b05      	ldr	r3, [pc, #20]	; (800633c <std+0x38>)
 8006328:	6263      	str	r3, [r4, #36]	; 0x24
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <std+0x3c>)
 800632c:	62a3      	str	r3, [r4, #40]	; 0x28
 800632e:	4b05      	ldr	r3, [pc, #20]	; (8006344 <std+0x40>)
 8006330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <std+0x44>)
 8006334:	6224      	str	r4, [r4, #32]
 8006336:	6323      	str	r3, [r4, #48]	; 0x30
 8006338:	bd10      	pop	{r4, pc}
 800633a:	bf00      	nop
 800633c:	08006bb5 	.word	0x08006bb5
 8006340:	08006bd7 	.word	0x08006bd7
 8006344:	08006c0f 	.word	0x08006c0f
 8006348:	08006c33 	.word	0x08006c33

0800634c <_cleanup_r>:
 800634c:	4901      	ldr	r1, [pc, #4]	; (8006354 <_cleanup_r+0x8>)
 800634e:	f000 b8af 	b.w	80064b0 <_fwalk_reent>
 8006352:	bf00      	nop
 8006354:	0800628d 	.word	0x0800628d

08006358 <__sfmoreglue>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	2268      	movs	r2, #104	; 0x68
 800635c:	1e4d      	subs	r5, r1, #1
 800635e:	4355      	muls	r5, r2
 8006360:	460e      	mov	r6, r1
 8006362:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006366:	f7ff fc99 	bl	8005c9c <_malloc_r>
 800636a:	4604      	mov	r4, r0
 800636c:	b140      	cbz	r0, 8006380 <__sfmoreglue+0x28>
 800636e:	2100      	movs	r1, #0
 8006370:	e9c0 1600 	strd	r1, r6, [r0]
 8006374:	300c      	adds	r0, #12
 8006376:	60a0      	str	r0, [r4, #8]
 8006378:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800637c:	f7ff fc1a 	bl	8005bb4 <memset>
 8006380:	4620      	mov	r0, r4
 8006382:	bd70      	pop	{r4, r5, r6, pc}

08006384 <__sfp_lock_acquire>:
 8006384:	4801      	ldr	r0, [pc, #4]	; (800638c <__sfp_lock_acquire+0x8>)
 8006386:	f000 b8b3 	b.w	80064f0 <__retarget_lock_acquire_recursive>
 800638a:	bf00      	nop
 800638c:	200002b5 	.word	0x200002b5

08006390 <__sfp_lock_release>:
 8006390:	4801      	ldr	r0, [pc, #4]	; (8006398 <__sfp_lock_release+0x8>)
 8006392:	f000 b8ae 	b.w	80064f2 <__retarget_lock_release_recursive>
 8006396:	bf00      	nop
 8006398:	200002b5 	.word	0x200002b5

0800639c <__sinit_lock_acquire>:
 800639c:	4801      	ldr	r0, [pc, #4]	; (80063a4 <__sinit_lock_acquire+0x8>)
 800639e:	f000 b8a7 	b.w	80064f0 <__retarget_lock_acquire_recursive>
 80063a2:	bf00      	nop
 80063a4:	200002b6 	.word	0x200002b6

080063a8 <__sinit_lock_release>:
 80063a8:	4801      	ldr	r0, [pc, #4]	; (80063b0 <__sinit_lock_release+0x8>)
 80063aa:	f000 b8a2 	b.w	80064f2 <__retarget_lock_release_recursive>
 80063ae:	bf00      	nop
 80063b0:	200002b6 	.word	0x200002b6

080063b4 <__sinit>:
 80063b4:	b510      	push	{r4, lr}
 80063b6:	4604      	mov	r4, r0
 80063b8:	f7ff fff0 	bl	800639c <__sinit_lock_acquire>
 80063bc:	69a3      	ldr	r3, [r4, #24]
 80063be:	b11b      	cbz	r3, 80063c8 <__sinit+0x14>
 80063c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c4:	f7ff bff0 	b.w	80063a8 <__sinit_lock_release>
 80063c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063cc:	6523      	str	r3, [r4, #80]	; 0x50
 80063ce:	4b13      	ldr	r3, [pc, #76]	; (800641c <__sinit+0x68>)
 80063d0:	4a13      	ldr	r2, [pc, #76]	; (8006420 <__sinit+0x6c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	bf04      	itt	eq
 80063da:	2301      	moveq	r3, #1
 80063dc:	61a3      	streq	r3, [r4, #24]
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 f820 	bl	8006424 <__sfp>
 80063e4:	6060      	str	r0, [r4, #4]
 80063e6:	4620      	mov	r0, r4
 80063e8:	f000 f81c 	bl	8006424 <__sfp>
 80063ec:	60a0      	str	r0, [r4, #8]
 80063ee:	4620      	mov	r0, r4
 80063f0:	f000 f818 	bl	8006424 <__sfp>
 80063f4:	2200      	movs	r2, #0
 80063f6:	60e0      	str	r0, [r4, #12]
 80063f8:	2104      	movs	r1, #4
 80063fa:	6860      	ldr	r0, [r4, #4]
 80063fc:	f7ff ff82 	bl	8006304 <std>
 8006400:	68a0      	ldr	r0, [r4, #8]
 8006402:	2201      	movs	r2, #1
 8006404:	2109      	movs	r1, #9
 8006406:	f7ff ff7d 	bl	8006304 <std>
 800640a:	68e0      	ldr	r0, [r4, #12]
 800640c:	2202      	movs	r2, #2
 800640e:	2112      	movs	r1, #18
 8006410:	f7ff ff78 	bl	8006304 <std>
 8006414:	2301      	movs	r3, #1
 8006416:	61a3      	str	r3, [r4, #24]
 8006418:	e7d2      	b.n	80063c0 <__sinit+0xc>
 800641a:	bf00      	nop
 800641c:	08006f48 	.word	0x08006f48
 8006420:	0800634d 	.word	0x0800634d

08006424 <__sfp>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	4607      	mov	r7, r0
 8006428:	f7ff ffac 	bl	8006384 <__sfp_lock_acquire>
 800642c:	4b1e      	ldr	r3, [pc, #120]	; (80064a8 <__sfp+0x84>)
 800642e:	681e      	ldr	r6, [r3, #0]
 8006430:	69b3      	ldr	r3, [r6, #24]
 8006432:	b913      	cbnz	r3, 800643a <__sfp+0x16>
 8006434:	4630      	mov	r0, r6
 8006436:	f7ff ffbd 	bl	80063b4 <__sinit>
 800643a:	3648      	adds	r6, #72	; 0x48
 800643c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006440:	3b01      	subs	r3, #1
 8006442:	d503      	bpl.n	800644c <__sfp+0x28>
 8006444:	6833      	ldr	r3, [r6, #0]
 8006446:	b30b      	cbz	r3, 800648c <__sfp+0x68>
 8006448:	6836      	ldr	r6, [r6, #0]
 800644a:	e7f7      	b.n	800643c <__sfp+0x18>
 800644c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006450:	b9d5      	cbnz	r5, 8006488 <__sfp+0x64>
 8006452:	4b16      	ldr	r3, [pc, #88]	; (80064ac <__sfp+0x88>)
 8006454:	60e3      	str	r3, [r4, #12]
 8006456:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800645a:	6665      	str	r5, [r4, #100]	; 0x64
 800645c:	f000 f847 	bl	80064ee <__retarget_lock_init_recursive>
 8006460:	f7ff ff96 	bl	8006390 <__sfp_lock_release>
 8006464:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006468:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800646c:	6025      	str	r5, [r4, #0]
 800646e:	61a5      	str	r5, [r4, #24]
 8006470:	2208      	movs	r2, #8
 8006472:	4629      	mov	r1, r5
 8006474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006478:	f7ff fb9c 	bl	8005bb4 <memset>
 800647c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006484:	4620      	mov	r0, r4
 8006486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006488:	3468      	adds	r4, #104	; 0x68
 800648a:	e7d9      	b.n	8006440 <__sfp+0x1c>
 800648c:	2104      	movs	r1, #4
 800648e:	4638      	mov	r0, r7
 8006490:	f7ff ff62 	bl	8006358 <__sfmoreglue>
 8006494:	4604      	mov	r4, r0
 8006496:	6030      	str	r0, [r6, #0]
 8006498:	2800      	cmp	r0, #0
 800649a:	d1d5      	bne.n	8006448 <__sfp+0x24>
 800649c:	f7ff ff78 	bl	8006390 <__sfp_lock_release>
 80064a0:	230c      	movs	r3, #12
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	e7ee      	b.n	8006484 <__sfp+0x60>
 80064a6:	bf00      	nop
 80064a8:	08006f48 	.word	0x08006f48
 80064ac:	ffff0001 	.word	0xffff0001

080064b0 <_fwalk_reent>:
 80064b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b4:	4606      	mov	r6, r0
 80064b6:	4688      	mov	r8, r1
 80064b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064bc:	2700      	movs	r7, #0
 80064be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064c2:	f1b9 0901 	subs.w	r9, r9, #1
 80064c6:	d505      	bpl.n	80064d4 <_fwalk_reent+0x24>
 80064c8:	6824      	ldr	r4, [r4, #0]
 80064ca:	2c00      	cmp	r4, #0
 80064cc:	d1f7      	bne.n	80064be <_fwalk_reent+0xe>
 80064ce:	4638      	mov	r0, r7
 80064d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064d4:	89ab      	ldrh	r3, [r5, #12]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d907      	bls.n	80064ea <_fwalk_reent+0x3a>
 80064da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064de:	3301      	adds	r3, #1
 80064e0:	d003      	beq.n	80064ea <_fwalk_reent+0x3a>
 80064e2:	4629      	mov	r1, r5
 80064e4:	4630      	mov	r0, r6
 80064e6:	47c0      	blx	r8
 80064e8:	4307      	orrs	r7, r0
 80064ea:	3568      	adds	r5, #104	; 0x68
 80064ec:	e7e9      	b.n	80064c2 <_fwalk_reent+0x12>

080064ee <__retarget_lock_init_recursive>:
 80064ee:	4770      	bx	lr

080064f0 <__retarget_lock_acquire_recursive>:
 80064f0:	4770      	bx	lr

080064f2 <__retarget_lock_release_recursive>:
 80064f2:	4770      	bx	lr

080064f4 <__swhatbuf_r>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	460e      	mov	r6, r1
 80064f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fc:	2900      	cmp	r1, #0
 80064fe:	b096      	sub	sp, #88	; 0x58
 8006500:	4614      	mov	r4, r2
 8006502:	461d      	mov	r5, r3
 8006504:	da08      	bge.n	8006518 <__swhatbuf_r+0x24>
 8006506:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	602a      	str	r2, [r5, #0]
 800650e:	061a      	lsls	r2, r3, #24
 8006510:	d410      	bmi.n	8006534 <__swhatbuf_r+0x40>
 8006512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006516:	e00e      	b.n	8006536 <__swhatbuf_r+0x42>
 8006518:	466a      	mov	r2, sp
 800651a:	f000 fbb1 	bl	8006c80 <_fstat_r>
 800651e:	2800      	cmp	r0, #0
 8006520:	dbf1      	blt.n	8006506 <__swhatbuf_r+0x12>
 8006522:	9a01      	ldr	r2, [sp, #4]
 8006524:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006528:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800652c:	425a      	negs	r2, r3
 800652e:	415a      	adcs	r2, r3
 8006530:	602a      	str	r2, [r5, #0]
 8006532:	e7ee      	b.n	8006512 <__swhatbuf_r+0x1e>
 8006534:	2340      	movs	r3, #64	; 0x40
 8006536:	2000      	movs	r0, #0
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	b016      	add	sp, #88	; 0x58
 800653c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006540 <__smakebuf_r>:
 8006540:	898b      	ldrh	r3, [r1, #12]
 8006542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006544:	079d      	lsls	r5, r3, #30
 8006546:	4606      	mov	r6, r0
 8006548:	460c      	mov	r4, r1
 800654a:	d507      	bpl.n	800655c <__smakebuf_r+0x1c>
 800654c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	6123      	str	r3, [r4, #16]
 8006554:	2301      	movs	r3, #1
 8006556:	6163      	str	r3, [r4, #20]
 8006558:	b002      	add	sp, #8
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	ab01      	add	r3, sp, #4
 800655e:	466a      	mov	r2, sp
 8006560:	f7ff ffc8 	bl	80064f4 <__swhatbuf_r>
 8006564:	9900      	ldr	r1, [sp, #0]
 8006566:	4605      	mov	r5, r0
 8006568:	4630      	mov	r0, r6
 800656a:	f7ff fb97 	bl	8005c9c <_malloc_r>
 800656e:	b948      	cbnz	r0, 8006584 <__smakebuf_r+0x44>
 8006570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006574:	059a      	lsls	r2, r3, #22
 8006576:	d4ef      	bmi.n	8006558 <__smakebuf_r+0x18>
 8006578:	f023 0303 	bic.w	r3, r3, #3
 800657c:	f043 0302 	orr.w	r3, r3, #2
 8006580:	81a3      	strh	r3, [r4, #12]
 8006582:	e7e3      	b.n	800654c <__smakebuf_r+0xc>
 8006584:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <__smakebuf_r+0x7c>)
 8006586:	62b3      	str	r3, [r6, #40]	; 0x28
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	6020      	str	r0, [r4, #0]
 800658c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006590:	81a3      	strh	r3, [r4, #12]
 8006592:	9b00      	ldr	r3, [sp, #0]
 8006594:	6163      	str	r3, [r4, #20]
 8006596:	9b01      	ldr	r3, [sp, #4]
 8006598:	6120      	str	r0, [r4, #16]
 800659a:	b15b      	cbz	r3, 80065b4 <__smakebuf_r+0x74>
 800659c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065a0:	4630      	mov	r0, r6
 80065a2:	f000 fb7f 	bl	8006ca4 <_isatty_r>
 80065a6:	b128      	cbz	r0, 80065b4 <__smakebuf_r+0x74>
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	81a3      	strh	r3, [r4, #12]
 80065b4:	89a0      	ldrh	r0, [r4, #12]
 80065b6:	4305      	orrs	r5, r0
 80065b8:	81a5      	strh	r5, [r4, #12]
 80065ba:	e7cd      	b.n	8006558 <__smakebuf_r+0x18>
 80065bc:	0800634d 	.word	0x0800634d

080065c0 <__malloc_lock>:
 80065c0:	4801      	ldr	r0, [pc, #4]	; (80065c8 <__malloc_lock+0x8>)
 80065c2:	f7ff bf95 	b.w	80064f0 <__retarget_lock_acquire_recursive>
 80065c6:	bf00      	nop
 80065c8:	200002b4 	.word	0x200002b4

080065cc <__malloc_unlock>:
 80065cc:	4801      	ldr	r0, [pc, #4]	; (80065d4 <__malloc_unlock+0x8>)
 80065ce:	f7ff bf90 	b.w	80064f2 <__retarget_lock_release_recursive>
 80065d2:	bf00      	nop
 80065d4:	200002b4 	.word	0x200002b4

080065d8 <__sfputc_r>:
 80065d8:	6893      	ldr	r3, [r2, #8]
 80065da:	3b01      	subs	r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	b410      	push	{r4}
 80065e0:	6093      	str	r3, [r2, #8]
 80065e2:	da08      	bge.n	80065f6 <__sfputc_r+0x1e>
 80065e4:	6994      	ldr	r4, [r2, #24]
 80065e6:	42a3      	cmp	r3, r4
 80065e8:	db01      	blt.n	80065ee <__sfputc_r+0x16>
 80065ea:	290a      	cmp	r1, #10
 80065ec:	d103      	bne.n	80065f6 <__sfputc_r+0x1e>
 80065ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065f2:	f7ff bd05 	b.w	8006000 <__swbuf_r>
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	1c58      	adds	r0, r3, #1
 80065fa:	6010      	str	r0, [r2, #0]
 80065fc:	7019      	strb	r1, [r3, #0]
 80065fe:	4608      	mov	r0, r1
 8006600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006604:	4770      	bx	lr

08006606 <__sfputs_r>:
 8006606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006608:	4606      	mov	r6, r0
 800660a:	460f      	mov	r7, r1
 800660c:	4614      	mov	r4, r2
 800660e:	18d5      	adds	r5, r2, r3
 8006610:	42ac      	cmp	r4, r5
 8006612:	d101      	bne.n	8006618 <__sfputs_r+0x12>
 8006614:	2000      	movs	r0, #0
 8006616:	e007      	b.n	8006628 <__sfputs_r+0x22>
 8006618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800661c:	463a      	mov	r2, r7
 800661e:	4630      	mov	r0, r6
 8006620:	f7ff ffda 	bl	80065d8 <__sfputc_r>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d1f3      	bne.n	8006610 <__sfputs_r+0xa>
 8006628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800662c <_vfiprintf_r>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	460d      	mov	r5, r1
 8006632:	b09d      	sub	sp, #116	; 0x74
 8006634:	4614      	mov	r4, r2
 8006636:	4698      	mov	r8, r3
 8006638:	4606      	mov	r6, r0
 800663a:	b118      	cbz	r0, 8006644 <_vfiprintf_r+0x18>
 800663c:	6983      	ldr	r3, [r0, #24]
 800663e:	b90b      	cbnz	r3, 8006644 <_vfiprintf_r+0x18>
 8006640:	f7ff feb8 	bl	80063b4 <__sinit>
 8006644:	4b89      	ldr	r3, [pc, #548]	; (800686c <_vfiprintf_r+0x240>)
 8006646:	429d      	cmp	r5, r3
 8006648:	d11b      	bne.n	8006682 <_vfiprintf_r+0x56>
 800664a:	6875      	ldr	r5, [r6, #4]
 800664c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800664e:	07d9      	lsls	r1, r3, #31
 8006650:	d405      	bmi.n	800665e <_vfiprintf_r+0x32>
 8006652:	89ab      	ldrh	r3, [r5, #12]
 8006654:	059a      	lsls	r2, r3, #22
 8006656:	d402      	bmi.n	800665e <_vfiprintf_r+0x32>
 8006658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800665a:	f7ff ff49 	bl	80064f0 <__retarget_lock_acquire_recursive>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	071b      	lsls	r3, r3, #28
 8006662:	d501      	bpl.n	8006668 <_vfiprintf_r+0x3c>
 8006664:	692b      	ldr	r3, [r5, #16]
 8006666:	b9eb      	cbnz	r3, 80066a4 <_vfiprintf_r+0x78>
 8006668:	4629      	mov	r1, r5
 800666a:	4630      	mov	r0, r6
 800666c:	f7ff fd1a 	bl	80060a4 <__swsetup_r>
 8006670:	b1c0      	cbz	r0, 80066a4 <_vfiprintf_r+0x78>
 8006672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006674:	07dc      	lsls	r4, r3, #31
 8006676:	d50e      	bpl.n	8006696 <_vfiprintf_r+0x6a>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	b01d      	add	sp, #116	; 0x74
 800667e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006682:	4b7b      	ldr	r3, [pc, #492]	; (8006870 <_vfiprintf_r+0x244>)
 8006684:	429d      	cmp	r5, r3
 8006686:	d101      	bne.n	800668c <_vfiprintf_r+0x60>
 8006688:	68b5      	ldr	r5, [r6, #8]
 800668a:	e7df      	b.n	800664c <_vfiprintf_r+0x20>
 800668c:	4b79      	ldr	r3, [pc, #484]	; (8006874 <_vfiprintf_r+0x248>)
 800668e:	429d      	cmp	r5, r3
 8006690:	bf08      	it	eq
 8006692:	68f5      	ldreq	r5, [r6, #12]
 8006694:	e7da      	b.n	800664c <_vfiprintf_r+0x20>
 8006696:	89ab      	ldrh	r3, [r5, #12]
 8006698:	0598      	lsls	r0, r3, #22
 800669a:	d4ed      	bmi.n	8006678 <_vfiprintf_r+0x4c>
 800669c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800669e:	f7ff ff28 	bl	80064f2 <__retarget_lock_release_recursive>
 80066a2:	e7e9      	b.n	8006678 <_vfiprintf_r+0x4c>
 80066a4:	2300      	movs	r3, #0
 80066a6:	9309      	str	r3, [sp, #36]	; 0x24
 80066a8:	2320      	movs	r3, #32
 80066aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80066b2:	2330      	movs	r3, #48	; 0x30
 80066b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006878 <_vfiprintf_r+0x24c>
 80066b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066bc:	f04f 0901 	mov.w	r9, #1
 80066c0:	4623      	mov	r3, r4
 80066c2:	469a      	mov	sl, r3
 80066c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066c8:	b10a      	cbz	r2, 80066ce <_vfiprintf_r+0xa2>
 80066ca:	2a25      	cmp	r2, #37	; 0x25
 80066cc:	d1f9      	bne.n	80066c2 <_vfiprintf_r+0x96>
 80066ce:	ebba 0b04 	subs.w	fp, sl, r4
 80066d2:	d00b      	beq.n	80066ec <_vfiprintf_r+0xc0>
 80066d4:	465b      	mov	r3, fp
 80066d6:	4622      	mov	r2, r4
 80066d8:	4629      	mov	r1, r5
 80066da:	4630      	mov	r0, r6
 80066dc:	f7ff ff93 	bl	8006606 <__sfputs_r>
 80066e0:	3001      	adds	r0, #1
 80066e2:	f000 80aa 	beq.w	800683a <_vfiprintf_r+0x20e>
 80066e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e8:	445a      	add	r2, fp
 80066ea:	9209      	str	r2, [sp, #36]	; 0x24
 80066ec:	f89a 3000 	ldrb.w	r3, [sl]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80a2 	beq.w	800683a <_vfiprintf_r+0x20e>
 80066f6:	2300      	movs	r3, #0
 80066f8:	f04f 32ff 	mov.w	r2, #4294967295
 80066fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006700:	f10a 0a01 	add.w	sl, sl, #1
 8006704:	9304      	str	r3, [sp, #16]
 8006706:	9307      	str	r3, [sp, #28]
 8006708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800670c:	931a      	str	r3, [sp, #104]	; 0x68
 800670e:	4654      	mov	r4, sl
 8006710:	2205      	movs	r2, #5
 8006712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006716:	4858      	ldr	r0, [pc, #352]	; (8006878 <_vfiprintf_r+0x24c>)
 8006718:	f7f9 fd7a 	bl	8000210 <memchr>
 800671c:	9a04      	ldr	r2, [sp, #16]
 800671e:	b9d8      	cbnz	r0, 8006758 <_vfiprintf_r+0x12c>
 8006720:	06d1      	lsls	r1, r2, #27
 8006722:	bf44      	itt	mi
 8006724:	2320      	movmi	r3, #32
 8006726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800672a:	0713      	lsls	r3, r2, #28
 800672c:	bf44      	itt	mi
 800672e:	232b      	movmi	r3, #43	; 0x2b
 8006730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006734:	f89a 3000 	ldrb.w	r3, [sl]
 8006738:	2b2a      	cmp	r3, #42	; 0x2a
 800673a:	d015      	beq.n	8006768 <_vfiprintf_r+0x13c>
 800673c:	9a07      	ldr	r2, [sp, #28]
 800673e:	4654      	mov	r4, sl
 8006740:	2000      	movs	r0, #0
 8006742:	f04f 0c0a 	mov.w	ip, #10
 8006746:	4621      	mov	r1, r4
 8006748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800674c:	3b30      	subs	r3, #48	; 0x30
 800674e:	2b09      	cmp	r3, #9
 8006750:	d94e      	bls.n	80067f0 <_vfiprintf_r+0x1c4>
 8006752:	b1b0      	cbz	r0, 8006782 <_vfiprintf_r+0x156>
 8006754:	9207      	str	r2, [sp, #28]
 8006756:	e014      	b.n	8006782 <_vfiprintf_r+0x156>
 8006758:	eba0 0308 	sub.w	r3, r0, r8
 800675c:	fa09 f303 	lsl.w	r3, r9, r3
 8006760:	4313      	orrs	r3, r2
 8006762:	9304      	str	r3, [sp, #16]
 8006764:	46a2      	mov	sl, r4
 8006766:	e7d2      	b.n	800670e <_vfiprintf_r+0xe2>
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	1d19      	adds	r1, r3, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	9103      	str	r1, [sp, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	bfbb      	ittet	lt
 8006774:	425b      	neglt	r3, r3
 8006776:	f042 0202 	orrlt.w	r2, r2, #2
 800677a:	9307      	strge	r3, [sp, #28]
 800677c:	9307      	strlt	r3, [sp, #28]
 800677e:	bfb8      	it	lt
 8006780:	9204      	strlt	r2, [sp, #16]
 8006782:	7823      	ldrb	r3, [r4, #0]
 8006784:	2b2e      	cmp	r3, #46	; 0x2e
 8006786:	d10c      	bne.n	80067a2 <_vfiprintf_r+0x176>
 8006788:	7863      	ldrb	r3, [r4, #1]
 800678a:	2b2a      	cmp	r3, #42	; 0x2a
 800678c:	d135      	bne.n	80067fa <_vfiprintf_r+0x1ce>
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	1d1a      	adds	r2, r3, #4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	9203      	str	r2, [sp, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	bfb8      	it	lt
 800679a:	f04f 33ff 	movlt.w	r3, #4294967295
 800679e:	3402      	adds	r4, #2
 80067a0:	9305      	str	r3, [sp, #20]
 80067a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006888 <_vfiprintf_r+0x25c>
 80067a6:	7821      	ldrb	r1, [r4, #0]
 80067a8:	2203      	movs	r2, #3
 80067aa:	4650      	mov	r0, sl
 80067ac:	f7f9 fd30 	bl	8000210 <memchr>
 80067b0:	b140      	cbz	r0, 80067c4 <_vfiprintf_r+0x198>
 80067b2:	2340      	movs	r3, #64	; 0x40
 80067b4:	eba0 000a 	sub.w	r0, r0, sl
 80067b8:	fa03 f000 	lsl.w	r0, r3, r0
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	4303      	orrs	r3, r0
 80067c0:	3401      	adds	r4, #1
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c8:	482c      	ldr	r0, [pc, #176]	; (800687c <_vfiprintf_r+0x250>)
 80067ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ce:	2206      	movs	r2, #6
 80067d0:	f7f9 fd1e 	bl	8000210 <memchr>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d03f      	beq.n	8006858 <_vfiprintf_r+0x22c>
 80067d8:	4b29      	ldr	r3, [pc, #164]	; (8006880 <_vfiprintf_r+0x254>)
 80067da:	bb1b      	cbnz	r3, 8006824 <_vfiprintf_r+0x1f8>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	3307      	adds	r3, #7
 80067e0:	f023 0307 	bic.w	r3, r3, #7
 80067e4:	3308      	adds	r3, #8
 80067e6:	9303      	str	r3, [sp, #12]
 80067e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ea:	443b      	add	r3, r7
 80067ec:	9309      	str	r3, [sp, #36]	; 0x24
 80067ee:	e767      	b.n	80066c0 <_vfiprintf_r+0x94>
 80067f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80067f4:	460c      	mov	r4, r1
 80067f6:	2001      	movs	r0, #1
 80067f8:	e7a5      	b.n	8006746 <_vfiprintf_r+0x11a>
 80067fa:	2300      	movs	r3, #0
 80067fc:	3401      	adds	r4, #1
 80067fe:	9305      	str	r3, [sp, #20]
 8006800:	4619      	mov	r1, r3
 8006802:	f04f 0c0a 	mov.w	ip, #10
 8006806:	4620      	mov	r0, r4
 8006808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800680c:	3a30      	subs	r2, #48	; 0x30
 800680e:	2a09      	cmp	r2, #9
 8006810:	d903      	bls.n	800681a <_vfiprintf_r+0x1ee>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0c5      	beq.n	80067a2 <_vfiprintf_r+0x176>
 8006816:	9105      	str	r1, [sp, #20]
 8006818:	e7c3      	b.n	80067a2 <_vfiprintf_r+0x176>
 800681a:	fb0c 2101 	mla	r1, ip, r1, r2
 800681e:	4604      	mov	r4, r0
 8006820:	2301      	movs	r3, #1
 8006822:	e7f0      	b.n	8006806 <_vfiprintf_r+0x1da>
 8006824:	ab03      	add	r3, sp, #12
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	462a      	mov	r2, r5
 800682a:	4b16      	ldr	r3, [pc, #88]	; (8006884 <_vfiprintf_r+0x258>)
 800682c:	a904      	add	r1, sp, #16
 800682e:	4630      	mov	r0, r6
 8006830:	f3af 8000 	nop.w
 8006834:	4607      	mov	r7, r0
 8006836:	1c78      	adds	r0, r7, #1
 8006838:	d1d6      	bne.n	80067e8 <_vfiprintf_r+0x1bc>
 800683a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800683c:	07d9      	lsls	r1, r3, #31
 800683e:	d405      	bmi.n	800684c <_vfiprintf_r+0x220>
 8006840:	89ab      	ldrh	r3, [r5, #12]
 8006842:	059a      	lsls	r2, r3, #22
 8006844:	d402      	bmi.n	800684c <_vfiprintf_r+0x220>
 8006846:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006848:	f7ff fe53 	bl	80064f2 <__retarget_lock_release_recursive>
 800684c:	89ab      	ldrh	r3, [r5, #12]
 800684e:	065b      	lsls	r3, r3, #25
 8006850:	f53f af12 	bmi.w	8006678 <_vfiprintf_r+0x4c>
 8006854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006856:	e711      	b.n	800667c <_vfiprintf_r+0x50>
 8006858:	ab03      	add	r3, sp, #12
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	462a      	mov	r2, r5
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <_vfiprintf_r+0x258>)
 8006860:	a904      	add	r1, sp, #16
 8006862:	4630      	mov	r0, r6
 8006864:	f000 f880 	bl	8006968 <_printf_i>
 8006868:	e7e4      	b.n	8006834 <_vfiprintf_r+0x208>
 800686a:	bf00      	nop
 800686c:	08007070 	.word	0x08007070
 8006870:	08007090 	.word	0x08007090
 8006874:	08007050 	.word	0x08007050
 8006878:	080070b0 	.word	0x080070b0
 800687c:	080070ba 	.word	0x080070ba
 8006880:	00000000 	.word	0x00000000
 8006884:	08006607 	.word	0x08006607
 8006888:	080070b6 	.word	0x080070b6

0800688c <_printf_common>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	4616      	mov	r6, r2
 8006892:	4699      	mov	r9, r3
 8006894:	688a      	ldr	r2, [r1, #8]
 8006896:	690b      	ldr	r3, [r1, #16]
 8006898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800689c:	4293      	cmp	r3, r2
 800689e:	bfb8      	it	lt
 80068a0:	4613      	movlt	r3, r2
 80068a2:	6033      	str	r3, [r6, #0]
 80068a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068a8:	4607      	mov	r7, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	b10a      	cbz	r2, 80068b2 <_printf_common+0x26>
 80068ae:	3301      	adds	r3, #1
 80068b0:	6033      	str	r3, [r6, #0]
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	0699      	lsls	r1, r3, #26
 80068b6:	bf42      	ittt	mi
 80068b8:	6833      	ldrmi	r3, [r6, #0]
 80068ba:	3302      	addmi	r3, #2
 80068bc:	6033      	strmi	r3, [r6, #0]
 80068be:	6825      	ldr	r5, [r4, #0]
 80068c0:	f015 0506 	ands.w	r5, r5, #6
 80068c4:	d106      	bne.n	80068d4 <_printf_common+0x48>
 80068c6:	f104 0a19 	add.w	sl, r4, #25
 80068ca:	68e3      	ldr	r3, [r4, #12]
 80068cc:	6832      	ldr	r2, [r6, #0]
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	dc26      	bgt.n	8006922 <_printf_common+0x96>
 80068d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068d8:	1e13      	subs	r3, r2, #0
 80068da:	6822      	ldr	r2, [r4, #0]
 80068dc:	bf18      	it	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	0692      	lsls	r2, r2, #26
 80068e2:	d42b      	bmi.n	800693c <_printf_common+0xb0>
 80068e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068e8:	4649      	mov	r1, r9
 80068ea:	4638      	mov	r0, r7
 80068ec:	47c0      	blx	r8
 80068ee:	3001      	adds	r0, #1
 80068f0:	d01e      	beq.n	8006930 <_printf_common+0xa4>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	68e5      	ldr	r5, [r4, #12]
 80068f6:	6832      	ldr	r2, [r6, #0]
 80068f8:	f003 0306 	and.w	r3, r3, #6
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	bf08      	it	eq
 8006900:	1aad      	subeq	r5, r5, r2
 8006902:	68a3      	ldr	r3, [r4, #8]
 8006904:	6922      	ldr	r2, [r4, #16]
 8006906:	bf0c      	ite	eq
 8006908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800690c:	2500      	movne	r5, #0
 800690e:	4293      	cmp	r3, r2
 8006910:	bfc4      	itt	gt
 8006912:	1a9b      	subgt	r3, r3, r2
 8006914:	18ed      	addgt	r5, r5, r3
 8006916:	2600      	movs	r6, #0
 8006918:	341a      	adds	r4, #26
 800691a:	42b5      	cmp	r5, r6
 800691c:	d11a      	bne.n	8006954 <_printf_common+0xc8>
 800691e:	2000      	movs	r0, #0
 8006920:	e008      	b.n	8006934 <_printf_common+0xa8>
 8006922:	2301      	movs	r3, #1
 8006924:	4652      	mov	r2, sl
 8006926:	4649      	mov	r1, r9
 8006928:	4638      	mov	r0, r7
 800692a:	47c0      	blx	r8
 800692c:	3001      	adds	r0, #1
 800692e:	d103      	bne.n	8006938 <_printf_common+0xac>
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006938:	3501      	adds	r5, #1
 800693a:	e7c6      	b.n	80068ca <_printf_common+0x3e>
 800693c:	18e1      	adds	r1, r4, r3
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	2030      	movs	r0, #48	; 0x30
 8006942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006946:	4422      	add	r2, r4
 8006948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800694c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006950:	3302      	adds	r3, #2
 8006952:	e7c7      	b.n	80068e4 <_printf_common+0x58>
 8006954:	2301      	movs	r3, #1
 8006956:	4622      	mov	r2, r4
 8006958:	4649      	mov	r1, r9
 800695a:	4638      	mov	r0, r7
 800695c:	47c0      	blx	r8
 800695e:	3001      	adds	r0, #1
 8006960:	d0e6      	beq.n	8006930 <_printf_common+0xa4>
 8006962:	3601      	adds	r6, #1
 8006964:	e7d9      	b.n	800691a <_printf_common+0x8e>
	...

08006968 <_printf_i>:
 8006968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	7e0f      	ldrb	r7, [r1, #24]
 800696e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006970:	2f78      	cmp	r7, #120	; 0x78
 8006972:	4691      	mov	r9, r2
 8006974:	4680      	mov	r8, r0
 8006976:	460c      	mov	r4, r1
 8006978:	469a      	mov	sl, r3
 800697a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800697e:	d807      	bhi.n	8006990 <_printf_i+0x28>
 8006980:	2f62      	cmp	r7, #98	; 0x62
 8006982:	d80a      	bhi.n	800699a <_printf_i+0x32>
 8006984:	2f00      	cmp	r7, #0
 8006986:	f000 80d8 	beq.w	8006b3a <_printf_i+0x1d2>
 800698a:	2f58      	cmp	r7, #88	; 0x58
 800698c:	f000 80a3 	beq.w	8006ad6 <_printf_i+0x16e>
 8006990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006998:	e03a      	b.n	8006a10 <_printf_i+0xa8>
 800699a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800699e:	2b15      	cmp	r3, #21
 80069a0:	d8f6      	bhi.n	8006990 <_printf_i+0x28>
 80069a2:	a101      	add	r1, pc, #4	; (adr r1, 80069a8 <_printf_i+0x40>)
 80069a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a8:	08006a01 	.word	0x08006a01
 80069ac:	08006a15 	.word	0x08006a15
 80069b0:	08006991 	.word	0x08006991
 80069b4:	08006991 	.word	0x08006991
 80069b8:	08006991 	.word	0x08006991
 80069bc:	08006991 	.word	0x08006991
 80069c0:	08006a15 	.word	0x08006a15
 80069c4:	08006991 	.word	0x08006991
 80069c8:	08006991 	.word	0x08006991
 80069cc:	08006991 	.word	0x08006991
 80069d0:	08006991 	.word	0x08006991
 80069d4:	08006b21 	.word	0x08006b21
 80069d8:	08006a45 	.word	0x08006a45
 80069dc:	08006b03 	.word	0x08006b03
 80069e0:	08006991 	.word	0x08006991
 80069e4:	08006991 	.word	0x08006991
 80069e8:	08006b43 	.word	0x08006b43
 80069ec:	08006991 	.word	0x08006991
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	08006991 	.word	0x08006991
 80069f8:	08006991 	.word	0x08006991
 80069fc:	08006b0b 	.word	0x08006b0b
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	1d1a      	adds	r2, r3, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	602a      	str	r2, [r5, #0]
 8006a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a10:	2301      	movs	r3, #1
 8006a12:	e0a3      	b.n	8006b5c <_printf_i+0x1f4>
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	6829      	ldr	r1, [r5, #0]
 8006a18:	0606      	lsls	r6, r0, #24
 8006a1a:	f101 0304 	add.w	r3, r1, #4
 8006a1e:	d50a      	bpl.n	8006a36 <_printf_i+0xce>
 8006a20:	680e      	ldr	r6, [r1, #0]
 8006a22:	602b      	str	r3, [r5, #0]
 8006a24:	2e00      	cmp	r6, #0
 8006a26:	da03      	bge.n	8006a30 <_printf_i+0xc8>
 8006a28:	232d      	movs	r3, #45	; 0x2d
 8006a2a:	4276      	negs	r6, r6
 8006a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a30:	485e      	ldr	r0, [pc, #376]	; (8006bac <_printf_i+0x244>)
 8006a32:	230a      	movs	r3, #10
 8006a34:	e019      	b.n	8006a6a <_printf_i+0x102>
 8006a36:	680e      	ldr	r6, [r1, #0]
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a3e:	bf18      	it	ne
 8006a40:	b236      	sxthne	r6, r6
 8006a42:	e7ef      	b.n	8006a24 <_printf_i+0xbc>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	6820      	ldr	r0, [r4, #0]
 8006a48:	1d19      	adds	r1, r3, #4
 8006a4a:	6029      	str	r1, [r5, #0]
 8006a4c:	0601      	lsls	r1, r0, #24
 8006a4e:	d501      	bpl.n	8006a54 <_printf_i+0xec>
 8006a50:	681e      	ldr	r6, [r3, #0]
 8006a52:	e002      	b.n	8006a5a <_printf_i+0xf2>
 8006a54:	0646      	lsls	r6, r0, #25
 8006a56:	d5fb      	bpl.n	8006a50 <_printf_i+0xe8>
 8006a58:	881e      	ldrh	r6, [r3, #0]
 8006a5a:	4854      	ldr	r0, [pc, #336]	; (8006bac <_printf_i+0x244>)
 8006a5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a5e:	bf0c      	ite	eq
 8006a60:	2308      	moveq	r3, #8
 8006a62:	230a      	movne	r3, #10
 8006a64:	2100      	movs	r1, #0
 8006a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a6a:	6865      	ldr	r5, [r4, #4]
 8006a6c:	60a5      	str	r5, [r4, #8]
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	bfa2      	ittt	ge
 8006a72:	6821      	ldrge	r1, [r4, #0]
 8006a74:	f021 0104 	bicge.w	r1, r1, #4
 8006a78:	6021      	strge	r1, [r4, #0]
 8006a7a:	b90e      	cbnz	r6, 8006a80 <_printf_i+0x118>
 8006a7c:	2d00      	cmp	r5, #0
 8006a7e:	d04d      	beq.n	8006b1c <_printf_i+0x1b4>
 8006a80:	4615      	mov	r5, r2
 8006a82:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a86:	fb03 6711 	mls	r7, r3, r1, r6
 8006a8a:	5dc7      	ldrb	r7, [r0, r7]
 8006a8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a90:	4637      	mov	r7, r6
 8006a92:	42bb      	cmp	r3, r7
 8006a94:	460e      	mov	r6, r1
 8006a96:	d9f4      	bls.n	8006a82 <_printf_i+0x11a>
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d10b      	bne.n	8006ab4 <_printf_i+0x14c>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	07de      	lsls	r6, r3, #31
 8006aa0:	d508      	bpl.n	8006ab4 <_printf_i+0x14c>
 8006aa2:	6923      	ldr	r3, [r4, #16]
 8006aa4:	6861      	ldr	r1, [r4, #4]
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	bfde      	ittt	le
 8006aaa:	2330      	movle	r3, #48	; 0x30
 8006aac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ab0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ab4:	1b52      	subs	r2, r2, r5
 8006ab6:	6122      	str	r2, [r4, #16]
 8006ab8:	f8cd a000 	str.w	sl, [sp]
 8006abc:	464b      	mov	r3, r9
 8006abe:	aa03      	add	r2, sp, #12
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	f7ff fee2 	bl	800688c <_printf_common>
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d14c      	bne.n	8006b66 <_printf_i+0x1fe>
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	b004      	add	sp, #16
 8006ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad6:	4835      	ldr	r0, [pc, #212]	; (8006bac <_printf_i+0x244>)
 8006ad8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006adc:	6829      	ldr	r1, [r5, #0]
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ae4:	6029      	str	r1, [r5, #0]
 8006ae6:	061d      	lsls	r5, r3, #24
 8006ae8:	d514      	bpl.n	8006b14 <_printf_i+0x1ac>
 8006aea:	07df      	lsls	r7, r3, #31
 8006aec:	bf44      	itt	mi
 8006aee:	f043 0320 	orrmi.w	r3, r3, #32
 8006af2:	6023      	strmi	r3, [r4, #0]
 8006af4:	b91e      	cbnz	r6, 8006afe <_printf_i+0x196>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	f023 0320 	bic.w	r3, r3, #32
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	2310      	movs	r3, #16
 8006b00:	e7b0      	b.n	8006a64 <_printf_i+0xfc>
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	f043 0320 	orr.w	r3, r3, #32
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	2378      	movs	r3, #120	; 0x78
 8006b0c:	4828      	ldr	r0, [pc, #160]	; (8006bb0 <_printf_i+0x248>)
 8006b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b12:	e7e3      	b.n	8006adc <_printf_i+0x174>
 8006b14:	0659      	lsls	r1, r3, #25
 8006b16:	bf48      	it	mi
 8006b18:	b2b6      	uxthmi	r6, r6
 8006b1a:	e7e6      	b.n	8006aea <_printf_i+0x182>
 8006b1c:	4615      	mov	r5, r2
 8006b1e:	e7bb      	b.n	8006a98 <_printf_i+0x130>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	6826      	ldr	r6, [r4, #0]
 8006b24:	6961      	ldr	r1, [r4, #20]
 8006b26:	1d18      	adds	r0, r3, #4
 8006b28:	6028      	str	r0, [r5, #0]
 8006b2a:	0635      	lsls	r5, r6, #24
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	d501      	bpl.n	8006b34 <_printf_i+0x1cc>
 8006b30:	6019      	str	r1, [r3, #0]
 8006b32:	e002      	b.n	8006b3a <_printf_i+0x1d2>
 8006b34:	0670      	lsls	r0, r6, #25
 8006b36:	d5fb      	bpl.n	8006b30 <_printf_i+0x1c8>
 8006b38:	8019      	strh	r1, [r3, #0]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	6123      	str	r3, [r4, #16]
 8006b3e:	4615      	mov	r5, r2
 8006b40:	e7ba      	b.n	8006ab8 <_printf_i+0x150>
 8006b42:	682b      	ldr	r3, [r5, #0]
 8006b44:	1d1a      	adds	r2, r3, #4
 8006b46:	602a      	str	r2, [r5, #0]
 8006b48:	681d      	ldr	r5, [r3, #0]
 8006b4a:	6862      	ldr	r2, [r4, #4]
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f7f9 fb5e 	bl	8000210 <memchr>
 8006b54:	b108      	cbz	r0, 8006b5a <_printf_i+0x1f2>
 8006b56:	1b40      	subs	r0, r0, r5
 8006b58:	6060      	str	r0, [r4, #4]
 8006b5a:	6863      	ldr	r3, [r4, #4]
 8006b5c:	6123      	str	r3, [r4, #16]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b64:	e7a8      	b.n	8006ab8 <_printf_i+0x150>
 8006b66:	6923      	ldr	r3, [r4, #16]
 8006b68:	462a      	mov	r2, r5
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	47d0      	blx	sl
 8006b70:	3001      	adds	r0, #1
 8006b72:	d0ab      	beq.n	8006acc <_printf_i+0x164>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	079b      	lsls	r3, r3, #30
 8006b78:	d413      	bmi.n	8006ba2 <_printf_i+0x23a>
 8006b7a:	68e0      	ldr	r0, [r4, #12]
 8006b7c:	9b03      	ldr	r3, [sp, #12]
 8006b7e:	4298      	cmp	r0, r3
 8006b80:	bfb8      	it	lt
 8006b82:	4618      	movlt	r0, r3
 8006b84:	e7a4      	b.n	8006ad0 <_printf_i+0x168>
 8006b86:	2301      	movs	r3, #1
 8006b88:	4632      	mov	r2, r6
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	47d0      	blx	sl
 8006b90:	3001      	adds	r0, #1
 8006b92:	d09b      	beq.n	8006acc <_printf_i+0x164>
 8006b94:	3501      	adds	r5, #1
 8006b96:	68e3      	ldr	r3, [r4, #12]
 8006b98:	9903      	ldr	r1, [sp, #12]
 8006b9a:	1a5b      	subs	r3, r3, r1
 8006b9c:	42ab      	cmp	r3, r5
 8006b9e:	dcf2      	bgt.n	8006b86 <_printf_i+0x21e>
 8006ba0:	e7eb      	b.n	8006b7a <_printf_i+0x212>
 8006ba2:	2500      	movs	r5, #0
 8006ba4:	f104 0619 	add.w	r6, r4, #25
 8006ba8:	e7f5      	b.n	8006b96 <_printf_i+0x22e>
 8006baa:	bf00      	nop
 8006bac:	080070c1 	.word	0x080070c1
 8006bb0:	080070d2 	.word	0x080070d2

08006bb4 <__sread>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bbc:	f000 f894 	bl	8006ce8 <_read_r>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	bfab      	itete	ge
 8006bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006bc8:	181b      	addge	r3, r3, r0
 8006bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bce:	bfac      	ite	ge
 8006bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bd2:	81a3      	strhlt	r3, [r4, #12]
 8006bd4:	bd10      	pop	{r4, pc}

08006bd6 <__swrite>:
 8006bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bda:	461f      	mov	r7, r3
 8006bdc:	898b      	ldrh	r3, [r1, #12]
 8006bde:	05db      	lsls	r3, r3, #23
 8006be0:	4605      	mov	r5, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	4616      	mov	r6, r2
 8006be6:	d505      	bpl.n	8006bf4 <__swrite+0x1e>
 8006be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bec:	2302      	movs	r3, #2
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f000 f868 	bl	8006cc4 <_lseek_r>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	4632      	mov	r2, r6
 8006c02:	463b      	mov	r3, r7
 8006c04:	4628      	mov	r0, r5
 8006c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0a:	f000 b817 	b.w	8006c3c <_write_r>

08006c0e <__sseek>:
 8006c0e:	b510      	push	{r4, lr}
 8006c10:	460c      	mov	r4, r1
 8006c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c16:	f000 f855 	bl	8006cc4 <_lseek_r>
 8006c1a:	1c43      	adds	r3, r0, #1
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	bf15      	itete	ne
 8006c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c2a:	81a3      	strheq	r3, [r4, #12]
 8006c2c:	bf18      	it	ne
 8006c2e:	81a3      	strhne	r3, [r4, #12]
 8006c30:	bd10      	pop	{r4, pc}

08006c32 <__sclose>:
 8006c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c36:	f000 b813 	b.w	8006c60 <_close_r>
	...

08006c3c <_write_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d07      	ldr	r5, [pc, #28]	; (8006c5c <_write_r+0x20>)
 8006c40:	4604      	mov	r4, r0
 8006c42:	4608      	mov	r0, r1
 8006c44:	4611      	mov	r1, r2
 8006c46:	2200      	movs	r2, #0
 8006c48:	602a      	str	r2, [r5, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f7fa fb53 	bl	80012f6 <_write>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_write_r+0x1e>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_write_r+0x1e>
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	200002b8 	.word	0x200002b8

08006c60 <_close_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4d06      	ldr	r5, [pc, #24]	; (8006c7c <_close_r+0x1c>)
 8006c64:	2300      	movs	r3, #0
 8006c66:	4604      	mov	r4, r0
 8006c68:	4608      	mov	r0, r1
 8006c6a:	602b      	str	r3, [r5, #0]
 8006c6c:	f7fa fb5f 	bl	800132e <_close>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_close_r+0x1a>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_close_r+0x1a>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	200002b8 	.word	0x200002b8

08006c80 <_fstat_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	; (8006ca0 <_fstat_r+0x20>)
 8006c84:	2300      	movs	r3, #0
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	f7fa fb5a 	bl	8001346 <_fstat>
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	d102      	bne.n	8006c9c <_fstat_r+0x1c>
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	b103      	cbz	r3, 8006c9c <_fstat_r+0x1c>
 8006c9a:	6023      	str	r3, [r4, #0]
 8006c9c:	bd38      	pop	{r3, r4, r5, pc}
 8006c9e:	bf00      	nop
 8006ca0:	200002b8 	.word	0x200002b8

08006ca4 <_isatty_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d06      	ldr	r5, [pc, #24]	; (8006cc0 <_isatty_r+0x1c>)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	602b      	str	r3, [r5, #0]
 8006cb0:	f7fa fb59 	bl	8001366 <_isatty>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	d102      	bne.n	8006cbe <_isatty_r+0x1a>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b103      	cbz	r3, 8006cbe <_isatty_r+0x1a>
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	200002b8 	.word	0x200002b8

08006cc4 <_lseek_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4d07      	ldr	r5, [pc, #28]	; (8006ce4 <_lseek_r+0x20>)
 8006cc8:	4604      	mov	r4, r0
 8006cca:	4608      	mov	r0, r1
 8006ccc:	4611      	mov	r1, r2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	602a      	str	r2, [r5, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f7fa fb52 	bl	800137c <_lseek>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_lseek_r+0x1e>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_lseek_r+0x1e>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	200002b8 	.word	0x200002b8

08006ce8 <_read_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	4d07      	ldr	r5, [pc, #28]	; (8006d08 <_read_r+0x20>)
 8006cec:	4604      	mov	r4, r0
 8006cee:	4608      	mov	r0, r1
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	602a      	str	r2, [r5, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f7fa fae0 	bl	80012bc <_read>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_read_r+0x1e>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_read_r+0x1e>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	200002b8 	.word	0x200002b8

08006d0c <_init>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	bf00      	nop
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr

08006d18 <_fini>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	bf00      	nop
 8006d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1e:	bc08      	pop	{r3}
 8006d20:	469e      	mov	lr, r3
 8006d22:	4770      	bx	lr
